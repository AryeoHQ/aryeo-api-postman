{
  "openapi": "3.0.0",
  "info": {
    "title": "Aryeo",
    "version": "2021-06-17",
    "description": "# Introduction\nThe Aryeo API provides access to the Aryeo platform. Use your favorite HTTP/REST library to interface with the Aryeo API.\n\n# Version Pinning\nThe Aryeo API is versioned. This documentation refers to the most recent version of the API; however, it is possible to use older versions of the API on a request-by-request basis. To explicitly use an older version, pass the `Aryeo-Version` header with a value for the version you would like to use.\n\n**Example**: `Aryeo-Version: 2021-06-17`\n\nInformation about each API version can be found in the releases section of the [documentation repository](https://github.com/AryeoHQ/aryeo-api-docs).\n\n# The Include Parameter\nSome endpoints provide a special `include` query parameter. This parameter allows the client to control the nested relations returned by an API response. For example, if a client only needs minimum information, then it may choose to omit the `include` parameter entirely. Or, if a client wants all possible information, then it may provide all possible values in the `include` parameter. This will have the side-effect of increasing the request's latency, but that may be advantageous depending on the client's use case.\n\n**Hint**: To see all possible values for the `include`  parameter, use an erroneous value such as `./path?include=fake` when making a request. Then, the API will respond with all allowed `include` values for that endpoint.\n",
    "contact": {
      "name": "Admin",
      "url": "https://www.aryeo.com",
      "email": "jarrod@aryeo.com"
    },
    "termsOfService": "https://www.aryeo.com/legal/terms-of-service",
    "x-logo": {
      "url": "https://raw.githubusercontent.com/jarrodparkes/images/master/aryeo-square.svg",
      "backgroundColor": "#fafafa"
    },
    "license": {
      "url": "https://choosealicense.com/licenses/apache-2.0/",
      "name": "Apache 2.0"
    }
  },
  "servers": [
    {
      "url": "https://api.aryeo.com/v1",
      "description": "Production"
    }
  ],
  "paths": {
    "/addresses": {
      "post": {
        "summary": "Create an address",
        "responses": {
          "201": {
            "description": "AddressResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "post-addresses",
        "description": "Creates a new address.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressPostPayload"
              }
            }
          },
          "description": "AddressPostPayload"
        },
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [],
        "x-internal": false,
        "tags": [
          "Addresses"
        ]
      }
    },
    "/appointments": {
      "get": {
        "summary": "List all appointments",
        "tags": [
          "Appointments"
        ],
        "responses": {
          "200": {
            "description": "AppointmentCollection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentCollection"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-appointments",
        "description": "List all appointments. By default, returns a list of appointments that have been scheduled and have not been canceled",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "owner,items,users,order,order.address,order.customer,order.customerGroup,order.listing,order.items,order.items.appointment"
            },
            "in": "query",
            "name": "include",
            "description": "Comma separated list of optional data to include in the response.",
            "allowEmptyValue": true
          },
          {
            "schema": {
              "type": "string",
              "example": "UPCOMING",
              "minLength": 1,
              "maxLength": 100,
              "enum": [
                "PAST",
                "UPCOMING"
              ]
            },
            "in": "query",
            "name": "filter[tense]",
            "description": "Return appointments that are upcoming or in the past."
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "description": "Status of the appointments to return",
                "type": "string",
                "example": "SCHEDULED",
                "minLength": 1,
                "maxLength": 100,
                "enum": [
                  "SCHEDULED",
                  "UNSCHEDULED",
                  "CANCELED"
                ]
              }
            },
            "in": "query",
            "name": "filter[statuses][]",
            "description": "Filters appointment by status, defaults to SCHEDULED."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 100,
              "format": "date-time",
              "example": "2021-01-01T13:00:00Z"
            },
            "in": "query",
            "name": "filter[start_at_gte]",
            "description": "Return appointments where the start_at field is greater than or equal to this value. Effectively, appointments that start after this date."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 100,
              "format": "date-time",
              "example": "2021-01-02T13:00:00Z"
            },
            "in": "query",
            "name": "filter[start_at_lte]",
            "description": "Return appointments where the start_at field is less than or equal to this value. Effectively, appointments that start before this date."
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "description": "ID of a user. UUID Version 4.",
                "type": "string",
                "minLength": 36,
                "maxLength": 36,
                "format": "uuid",
                "example": "00000000-0000-4000-8000-000000000000"
              }
            },
            "in": "query",
            "name": "filter[user_ids][]",
            "description": "The IDs of users whose appointments will be retrieved. UUID Version 4."
          },
          {
            "schema": {
              "type": "string",
              "example": "-created_at",
              "minLength": 1,
              "maxLength": 100
            },
            "in": "query",
            "name": "sort",
            "description": "Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to `-start_at`."
          },
          {
            "schema": {
              "type": "string",
              "example": "25",
              "minLength": 1,
              "maxLength": 5
            },
            "in": "query",
            "name": "per_page",
            "description": "The number of items per page. Defaults to 25."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 5,
              "example": "2"
            },
            "in": "query",
            "name": "page",
            "description": "The requested page. Defaults to 1."
          }
        ],
        "security": [
          {
            "Token": []
          }
        ],
        "x-internal": false
      }
    },
    "/appointments/{appointment_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "format": "uuid",
            "minLength": 0,
            "maxLength": 255,
            "example": "00000000-0000-4000-8000-000000000000"
          },
          "name": "appointment_id",
          "in": "path",
          "required": true,
          "description": "The ID of an appointment."
        }
      ],
      "get": {
        "summary": "Retrieve an appointment",
        "tags": [
          "Appointments"
        ],
        "responses": {
          "200": {
            "description": "AppointmentResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-appointments-id",
        "description": "Retrieves the details of an appointment with the given ID.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "owner,items,users,order,order.address,order.customer,order.customerGroup, order.listing,order.items,.order.items.appointment"
            },
            "in": "query",
            "name": "include",
            "description": "Comma separated list of optional data to include in the response.",
            "allowEmptyValue": true
          }
        ],
        "security": [
          {
            "Token": []
          }
        ],
        "x-internal": false
      },
      "put": {
        "summary": "Update an appointment",
        "operationId": "put-appointments-appointment_id",
        "responses": {
          "200": {
            "description": "AppointmentResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "x-internal": false,
        "description": "Updates the details of an appointment with the given ID.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppointmentUpdatePutPayload"
              }
            }
          }
        },
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/appointments/{appointment_id}/cancel": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "format": "uuid",
            "minLength": 0,
            "maxLength": 255,
            "example": "00000000-0000-4000-8000-000000000000"
          },
          "name": "appointment_id",
          "in": "path",
          "required": true,
          "description": "The ID of an appointment."
        }
      ],
      "put": {
        "summary": "Cancel an appointment",
        "operationId": "put-appointments-appointment-id-cancel",
        "responses": {
          "200": {
            "description": "AppointmentResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "409": {
            "description": "ApiError409",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError409"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "description": "Cancel an appointment. The appointments order's customer can be optionally notified of this change.",
        "security": [
          {
            "Token": []
          }
        ],
        "tags": [
          "Appointments"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppointmentCancelPutPayload"
              }
            }
          }
        }
      }
    },
    "/appointments/{appointment_id}/reschedule": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "format": "uuid",
            "minLength": 0,
            "maxLength": 255,
            "example": "00000000-0000-4000-8000-000000000000"
          },
          "name": "appointment_id",
          "in": "path",
          "required": true,
          "description": "The ID of an appointment."
        }
      ],
      "put": {
        "summary": "Reschedule an appointment",
        "operationId": "put-appointments-appointment-id-reschedule",
        "responses": {
          "200": {
            "description": "AppointmentResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "409": {
            "description": "ApiError409",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError409"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "description": "Reschedule an appointment. The appointments order's customer can be optionally notified of this change.",
        "security": [
          {
            "Token": []
          }
        ],
        "tags": [
          "Appointments"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppointmentReschedulePutPayload"
              }
            }
          }
        }
      }
    },
    "/listings": {
      "get": {
        "summary": "List all listings",
        "tags": [
          "Listings"
        ],
        "responses": {
          "200": {
            "description": "ListingCollection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingCollection"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-listings",
        "description": "Lists all listings available to a group.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "list_agent,list_agent.social_profiles,list_agent.owner,co_list_agent,co_list_agent.social_profiles,co_list_agent.owner,images,videos,floor_plans,interactive_content,property_website"
            },
            "in": "query",
            "name": "include",
            "description": "Comma separated list of optional data to include in the response.",
            "allowEmptyValue": true
          },
          {
            "schema": {
              "type": "string",
              "example": "123 Main St",
              "minLength": 1,
              "maxLength": 255
            },
            "in": "query",
            "name": "filter[search]",
            "description": "Return listings that have fields matching this term."
          },
          {
            "schema": {
              "type": "string",
              "example": "123 Main St",
              "minLength": 1,
              "maxLength": 255
            },
            "in": "query",
            "name": "filter[address]",
            "description": "Return listings that have an address matching this term."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255,
              "example": "John Doe"
            },
            "in": "query",
            "name": "filter[list_agent]",
            "description": "Return listings that have a listing agent or co-listing agent matching this term."
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "DRAFT",
                "COMING_SOON",
                "FOR_LEASE",
                "FOR_SALE",
                "PENDING_SALE",
                "PENDING_LEASE",
                "SOLD",
                "LEASED",
                "OFF_MARKET",
                "null"
              ],
              "example": "FOR_SALE",
              "minLength": 1,
              "maxLength": 100
            },
            "in": "query",
            "name": "filter[status]",
            "description": "Return listings that have a certain status."
          },
          {
            "schema": {
              "type": "boolean",
              "minLength": 0,
              "maxLength": 255,
              "example": true
            },
            "in": "query",
            "name": "filter[active]",
            "description": "Set as true to return listings that have an active status (e.g. active statuses include `COMING_SOON`, `FOR_SALE`, `FOR_LEASE`, `PENDING_SALE`, `PENDING_LEASE`, `SOLD`, `LEASED`)."
          },
          {
            "schema": {
              "type": "number",
              "example": 100000
            },
            "in": "query",
            "name": "filter[price_gte]",
            "description": "Return listings where the price field is greater than or equal to this value."
          },
          {
            "schema": {
              "type": "number",
              "example": 4000000
            },
            "in": "query",
            "name": "filter[price_lte]",
            "description": "Return listings where the price field is less than or equal to this value."
          },
          {
            "schema": {
              "type": "number",
              "example": 1000
            },
            "in": "query",
            "name": "filter[square_feet_gte]",
            "description": "Return listings where the square feet field is greater than or equal to this value."
          },
          {
            "schema": {
              "type": "number",
              "example": 5000
            },
            "in": "query",
            "name": "filter[square_feet_lte]",
            "description": "Return listings where the square feet field is less than or equal to this value."
          },
          {
            "schema": {
              "type": "integer",
              "example": 2
            },
            "in": "query",
            "name": "filter[bedrooms_gte]",
            "description": "Return listings where the bedrooms field is greater than or equal to this value."
          },
          {
            "schema": {
              "type": "integer",
              "example": 4
            },
            "in": "query",
            "name": "filter[bedrooms_lte]",
            "description": "Return listings where the bedrooms field is less than or equal to this value."
          },
          {
            "schema": {
              "type": "number",
              "example": 2.5
            },
            "in": "query",
            "name": "filter[bathrooms_gte]",
            "description": "Return listings where the bathrooms field is greater than or equal to this value."
          },
          {
            "schema": {
              "type": "number",
              "example": 5
            },
            "in": "query",
            "name": "filter[bathrooms_lte]",
            "description": "Return listings where the bathrooms field is less than or equal to this value."
          },
          {
            "schema": {
              "type": "string",
              "example": "-created_at",
              "minLength": 1,
              "maxLength": 100
            },
            "in": "query",
            "name": "sort",
            "description": "Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to `-created_at`."
          },
          {
            "schema": {
              "type": "string",
              "example": "25",
              "minLength": 1,
              "maxLength": 5
            },
            "in": "query",
            "name": "per_page",
            "description": "The number of items per page. Defaults to 25."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 5,
              "example": "2"
            },
            "in": "query",
            "name": "page",
            "description": "The requested page. Defaults to 1."
          }
        ],
        "security": [
          {
            "Token": []
          }
        ]
      },
      "post": {
        "summary": "Create a listing",
        "operationId": "post-listings",
        "responses": {
          "201": {
            "description": "ListingResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "409": {
            "description": "ApiError409",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError409"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "description": "Create a listing.",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListingPostPayload"
              }
            }
          },
          "description": "ListingPostPayload"
        },
        "tags": [
          "Listings"
        ]
      }
    },
    "/listings/{listing_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "example": "00000000-0000-4000-8000-000000000000"
          },
          "name": "listing_id",
          "in": "path",
          "required": true,
          "description": "The ID of a listing. UUID Version 4."
        }
      ],
      "get": {
        "summary": "Retrieve a listing",
        "tags": [
          "Listings"
        ],
        "responses": {
          "200": {
            "description": "ListingResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-listings-id",
        "description": "Retrieves the details of a listing with the given ID.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "list_agent,list_agent.social_profiles,list_agent.owner,co_list_agent,co_list_agent.social_profiles,co_list_agent.owner,images,videos,floor_plans,interactive_content,property_website,orders.appointments"
            },
            "in": "query",
            "name": "include",
            "description": "Comma separated list of optional data to include in the response.",
            "allowEmptyValue": true
          }
        ],
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/orders": {
      "get": {
        "summary": "List all orders",
        "responses": {
          "200": {
            "description": "OrderCollection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCollection"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-orders",
        "description": "Lists all orders of a group.",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "items,listing,customer,appointments,appointments.users,unconfirmed_appointments,order_form,discounts,discounts.coupon"
            },
            "in": "query",
            "name": "include",
            "description": "Comma separated list of optional data to include in the response.",
            "allowEmptyValue": true
          },
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "123 Imperial"
            },
            "in": "query",
            "name": "filter[search]",
            "description": "Return orders with addresses or customers that match on this string."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "PAID"
            },
            "in": "query",
            "name": "filter[payment_status]",
            "description": "Return orders with the specified payment status. Available payment statuses are PAID, PARTIALLY_PAID, and UNPAID."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "123 Imperial"
            },
            "in": "query",
            "name": "filter[fulfillment_status]",
            "description": "Return orders with the specified fulfillment status. Available fulfillment statuses are FULFILLED, PARTIALLY_FULFILLED, and UNFULFILLED."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 10,
              "maxLength": 20,
              "format": "date-time",
              "example": "2021-01-01T13:00:00Z"
            },
            "in": "query",
            "name": "filter[appointment_start_at_gte]",
            "description": "Return orders with an appointment starting after this date."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 10,
              "maxLength": 20,
              "format": "date-time",
              "example": "2021-01-01T13:00:00Z"
            },
            "in": "query",
            "name": "filter[appointment_start_at_lte]",
            "description": "Return orders with an appointment starting before this date."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 100,
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "in": "query",
            "name": "filter[creator_group_id]",
            "description": "Creator group ID used to fetch orders owned by a specific creator."
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "description": "ID of a tag. UUID Version 4.",
                "type": "string",
                "minLength": 36,
                "maxLength": 36,
                "format": "uuid",
                "example": "00000000-0000-4000-8000-000000000000"
              }
            },
            "in": "query",
            "name": "filter[tag_ids][]",
            "description": "Set to include orders with tags that match any of the tags provided."
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "description": "ID of a user. UUID Version 4.",
                "type": "string",
                "minLength": 36,
                "maxLength": 36,
                "format": "uuid",
                "example": "00000000-0000-4000-8000-000000000000"
              }
            },
            "in": "query",
            "name": "filter[user_ids][]",
            "description": "Set to include orders that have appointments with the given users."
          },
          {
            "schema": {
              "type": "string",
              "example": "appointment_start",
              "minLength": 1,
              "maxLength": 100
            },
            "in": "query",
            "name": "sort",
            "description": "Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to `-created_at`."
          },
          {
            "schema": {
              "type": "string",
              "example": "25",
              "minLength": 1,
              "maxLength": 5
            },
            "in": "query",
            "name": "per_page",
            "description": "The number of items per page. Defaults to 25."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 5,
              "example": "2"
            },
            "in": "query",
            "name": "page",
            "description": "The requested page. Defaults to 1."
          }
        ],
        "tags": [
          "Orders"
        ]
      },
      "post": {
        "summary": "Create an order",
        "operationId": "post-orders",
        "responses": {
          "201": {
            "description": "OrderResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "409": {
            "description": "ApiError409",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError409"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "description": "Create an order.",
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderPostPayload"
              }
            }
          },
          "description": "OrderPostPayload"
        }
      }
    },
    "/orders/{order_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "example": "00000000-0000-4000-8000-000000000000"
          },
          "name": "order_id",
          "in": "path",
          "required": true,
          "description": "The ID of an order. UUID Version 4."
        }
      ],
      "get": {
        "summary": "Retrieve an order",
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "OrderResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-orders-id",
        "description": "Retrieves the details of an order with the given ID.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "items,listing,customer,appointments,appointments.users,unconfirmed_appointments,order_form,discounts,discounts.coupon"
            },
            "in": "query",
            "name": "include",
            "description": "Comma separated list of optional data to include in the response.",
            "allowEmptyValue": true
          }
        ],
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/orders/{order_id}/tags": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "example": "00000000-0000-4000-8000-000000000000"
          },
          "name": "order_id",
          "in": "path",
          "required": true,
          "description": "The ID of an order. UUID Version 4."
        }
      ],
      "put": {
        "summary": "Update tags on an order",
        "tags": [
          "Orders"
        ],
        "responses": {
          "200": {
            "description": "OrderResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "put-order-tags-tag-id",
        "description": "Update tags of an order.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderTagsPutPayload"
              }
            }
          },
          "description": "OrderTagsPutPayload"
        },
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/order-forms": {
      "get": {
        "summary": "List all order forms",
        "responses": {
          "200": {
            "description": "OrderFormCollection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderFormCollection"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-order-forms",
        "description": "Lists all order forms for the current group.",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [],
        "tags": [
          "Order Forms"
        ]
      }
    },
    "/order-items": {
      "post": {
        "summary": "Create an order item",
        "operationId": "post-order-items",
        "responses": {
          "201": {
            "description": "OrderItemResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderItemResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "409": {
            "description": "ApiError409",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError409"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "description": "Create an order item.",
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderItemPostPayload"
              }
            }
          },
          "description": "OrderPostPayload"
        }
      }
    },
    "/order-items/{order_item_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "example": "00000000-0000-4000-8000-000000000000"
          },
          "name": "order_item_id",
          "in": "path",
          "required": true,
          "description": "The ID of an order item. UUID Version 4."
        }
      ],
      "get": {
        "summary": "Retrieve an order item",
        "tags": [
          "Orders"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "resource"
            },
            "in": "query",
            "name": "include",
            "description": "Comma separated list of optional data to include in the response."
          }
        ],
        "responses": {
          "200": {
            "description": "OrderItemResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderItemResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-order-items-order-item-id",
        "description": "Retrieve an order item."
      },
      "put": {
        "summary": "Update an order item",
        "tags": [
          "Orders"
        ],
        "operationId": "put-order-items-order-item-id",
        "responses": {
          "200": {
            "description": "OrderItemResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderItemResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "description": "Update an order item."
      },
      "delete": {
        "summary": "Delete an order item",
        "tags": [
          "Orders"
        ],
        "operationId": "delete-order-items-order-item-id",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "description": "Delete an order item."
      }
    },
    "/products": {
      "get": {
        "summary": "List all products",
        "responses": {
          "200": {
            "description": "ProductCollection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCollection"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-products",
        "description": "List all products of a group.",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "-created_at",
              "minLength": 1,
              "maxLength": 100
            },
            "in": "query",
            "name": "sort",
            "description": "Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to `title`."
          },
          {
            "schema": {
              "type": "string",
              "example": "25",
              "minLength": 1,
              "maxLength": 5
            },
            "in": "query",
            "name": "per_page",
            "description": "The number of items per page. Defaults to 25."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 5,
              "example": "2"
            },
            "in": "query",
            "name": "page",
            "description": "The requested page. Defaults to 1."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "Photography"
            },
            "in": "query",
            "name": "filter[search]",
            "description": "Return products that have fields matching this term."
          },
          {
            "schema": {
              "type": "boolean",
              "example": true
            },
            "in": "query",
            "name": "filter[include_inactive]",
            "description": "Include inactive products (in addition to active products) when returning products."
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "description": "ID of a category. UUID Version 4.",
                "type": "string",
                "minLength": 36,
                "maxLength": 36,
                "format": "uuid",
                "example": "00000000-0000-4000-8000-000000000000"
              }
            },
            "in": "query",
            "name": "filter[category_ids][]",
            "description": "Return products in the given categories."
          },
          {
            "schema": {
              "type": "string",
              "example": "MAIN",
              "minLength": 0,
              "maxLength": 255
            },
            "in": "query",
            "name": "filter[type]",
            "description": "Return products matching the given type. Allowed values are: MAIN, ADDON."
          }
        ],
        "tags": [
          "Products"
        ]
      },
      "parameters": []
    },
    "/product-categories": {
      "get": {
        "summary": "List all product categories",
        "responses": {
          "200": {
            "description": "ProductCategoryCollection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCategoryCollection"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-product-categories",
        "description": "List all product categories of a company.",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "-created_at",
              "minLength": 1,
              "maxLength": 100
            },
            "in": "query",
            "name": "sort",
            "description": "Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to `title`."
          },
          {
            "schema": {
              "type": "string",
              "example": "25",
              "minLength": 1,
              "maxLength": 5
            },
            "in": "query",
            "name": "per_page",
            "description": "The number of items per page. Defaults to 25."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 5,
              "example": "2"
            },
            "in": "query",
            "name": "page",
            "description": "The requested page. Defaults to 1."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "Photography"
            },
            "in": "query",
            "name": "filter[search]",
            "description": "Return product categories that have fields matching this term."
          }
        ],
        "tags": [
          "Products"
        ]
      },
      "parameters": []
    },
    "/scheduling/available-dates": {
      "get": {
        "summary": "List all available days",
        "tags": [
          "Scheduling"
        ],
        "responses": {
          "200": {
            "description": "CalendarDayCollection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDayCollection"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-available-dates",
        "description": "Fetch available calendar days for scheduling or rescheduling an appointment. Availability can be retrieved using a specific start & end date range, or using a timeframe. When using a timeframe, the page parameter can be used to flip through weeks, months, etc.",
        "parameters": [
          {
            "schema": {
              "type": "array",
              "items": {
                "description": "ID of a user. UUID Version 4.",
                "type": "string",
                "minLength": 36,
                "maxLength": 36,
                "format": "uuid",
                "example": "00000000-0000-4000-8000-000000000000"
              }
            },
            "in": "query",
            "name": "filter[user_ids][]",
            "description": "The IDs of users whose availability will be retrieved. UUID Version 4."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 100,
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "in": "query",
            "name": "filter[appointment_id]",
            "description": "Appointment ID used to fetch availability for an existing order"
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 100,
              "format": "date-time",
              "example": "2021-01-01T13:00:00Z"
            },
            "in": "query",
            "name": "filter[start_at]",
            "description": "Returns availability after start_at"
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 100,
              "format": "date-time",
              "example": "2021-01-02T13:00:00Z"
            },
            "in": "query",
            "name": "filter[end_at]",
            "description": "Returns availability before end_at"
          },
          {
            "schema": {
              "type": "string",
              "items": {
                "description": "Timeframe type",
                "type": "string",
                "minLength": 1,
                "maxLength": 5,
                "example": "MONTH"
              },
              "enum": [
                "DAY",
                "WEEK",
                "MONTH",
                "YEAR"
              ],
              "minLength": 1,
              "maxLength": 5,
              "example": "MONTH"
            },
            "in": "query",
            "name": "filter[timeframe]",
            "description": "Returns availability for a specific timeframe. Used instead of start_at & end_at"
          },
          {
            "schema": {
              "type": "integer",
              "example": 60,
              "minimum": 1,
              "maximum": 360
            },
            "in": "query",
            "name": "duration",
            "description": "Duration of the event to schedule. Required if appointment_id isn't specified"
          },
          {
            "schema": {
              "type": "integer",
              "example": 15,
              "minimum": 1,
              "maximum": 360
            },
            "in": "query",
            "name": "interval",
            "description": "Interval of bookable timeslots starting at x minutes on the hour . Required if appointment_id isn't specified"
          },
          {
            "schema": {
              "type": "string",
              "example": "CST",
              "minLength": 3,
              "maxLength": 50
            },
            "in": "query",
            "name": "timezone",
            "description": "The timezone of the client. Available dates results will be localized to this timezone",
            "required": true
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1,
              "example": 1
            },
            "in": "query",
            "name": "page",
            "description": "The requested page of results. Use this parameter to flip through pages when using the timeframe filter"
          },
          {
            "schema": {
              "type": "integer",
              "example": 5
            },
            "in": "query",
            "name": "per_page",
            "description": "The number of results per page. Only applies when using a date range"
          }
        ],
        "security": [
          {
            "Token": []
          }
        ],
        "x-internal": false
      },
      "parameters": []
    },
    "/scheduling/available-timeslots": {
      "get": {
        "summary": "List all available timeslots",
        "responses": {
          "200": {
            "description": "TimeslotCollection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeslotCollection"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-available-timeslots",
        "description": "Fetch available timeslots for scheduling or rescheduling an appointment. Timeslots are returned for the entire day in the local timezone. \n\nResults are returned in UTC!",
        "parameters": [
          {
            "schema": {
              "type": "array",
              "items": {
                "description": "ID of a user. UUID Version 4.",
                "type": "string",
                "minLength": 36,
                "maxLength": 36,
                "format": "uuid",
                "example": "00000000-0000-4000-8000-000000000000"
              }
            },
            "in": "query",
            "name": "filter[user_ids][]",
            "description": "The IDs of users whose appointments will be retrieved. UUID Version 4."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 100,
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "in": "query",
            "name": "filter[appointment_id]",
            "description": "Appointment ID used to fetch availability for an existing order"
          },
          {
            "schema": {
              "type": "integer",
              "example": 60,
              "minimum": 1,
              "maximum": 360
            },
            "in": "query",
            "name": "duration",
            "description": "Duration of the event to schedule. Required if appointment_id isn't specified"
          },
          {
            "schema": {
              "type": "integer",
              "example": 25,
              "minimum": 1,
              "maximum": 360
            },
            "in": "query",
            "name": "interval",
            "description": "Interval of bookable timeslots starting at x minutes on the hour . Required if appointment_id isn't specified"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1,
              "example": 1
            },
            "in": "query",
            "name": "page",
            "description": "The requested page of results"
          },
          {
            "schema": {
              "type": "integer",
              "example": 5,
              "minimum": 1
            },
            "in": "query",
            "name": "per_page",
            "description": "The number of results per page. Only applies when using a date range"
          },
          {
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2021-01-01",
              "minLength": 10,
              "maxLength": 10
            },
            "in": "query",
            "name": "date",
            "description": "The date to fetch available timeslots for",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "example": "CST",
              "minLength": 3,
              "maxLength": 50
            },
            "in": "query",
            "name": "timezone",
            "description": "The timezone is used to determine the start and end time of the specified date to retrieve a full day of results.",
            "required": true
          }
        ],
        "security": [
          {
            "Token": []
          }
        ],
        "x-internal": false,
        "tags": [
          "Scheduling"
        ]
      },
      "parameters": []
    },
    "/videos/{video_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "example": "00000000-0000-4000-8000-000000000000"
          },
          "name": "video_id",
          "in": "path",
          "required": true,
          "description": "The ID of a video. UUID Version 4."
        }
      ],
      "get": {
        "summary": "Retrieve a video",
        "tags": [
          "Listings"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-videos-video-id",
        "description": "Retrieve a video.",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": []
      },
      "put": {
        "summary": "Update a video",
        "operationId": "put-videos-video-id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "description": "Update a video.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoPutPayload"
              }
            }
          }
        },
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [],
        "tags": [
          "Listings"
        ]
      },
      "delete": {
        "summary": "Delete a video",
        "operationId": "delete-videos-video-id",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "description": "Delete a video.",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [],
        "tags": [
          "Listings"
        ]
      }
    },
    "/order-form-sessions": {
      "post": {
        "summary": "Create an order form session",
        "operationId": "post-order-form-sessions",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderFormSessionResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "tags": [
          "Order Forms"
        ],
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [],
        "description": "Create an order form session",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderFormSessionPostPayload"
              }
            }
          }
        }
      }
    },
    "/territories": {
      "get": {
        "summary": "List all territories",
        "tags": [
          "Products"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TerritoryCollection"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-territories",
        "description": "List all territories.",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "ID of an address. UUID Version 4.",
              "minLength": 36,
              "maxLength": 36,
              "format": "uuid",
              "example": "00000000-0000-4000-8000-000000000000"
            },
            "in": "query",
            "name": "filter[address_id]",
            "description": "An address ID. When set, only territories that contain this address within their bounds are returned."
          }
        ]
      }
    },
    "/coupons": {
      "get": {
        "summary": "List all coupons.",
        "description": "List all coupons.",
        "tags": [
          "Products"
        ],
        "responses": {
          "200": {
            "description": "CouponCollection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponCollection"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-coupons",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "ID of an address. UUID Version 4.",
              "minLength": 36,
              "maxLength": 36,
              "example": "00000000-0000-4000-8000-000000000000",
              "format": "uuid"
            },
            "in": "query",
            "name": "filter[search]",
            "description": "Return coupons that have a name matching this field."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "promotion_codes"
            },
            "in": "query",
            "name": "include",
            "description": "Comma separated list of optional data to include in the response.",
            "allowEmptyValue": true
          },
          {
            "schema": {
              "type": "string",
              "example": "-created_at",
              "minLength": 1,
              "maxLength": 100
            },
            "in": "query",
            "name": "sort",
            "description": "Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to `-created_at`."
          },
          {
            "schema": {
              "type": "string",
              "example": "25",
              "minLength": 1,
              "maxLength": 5
            },
            "in": "query",
            "name": "per_page",
            "description": "The number of items per page. Defaults to 25."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 5,
              "example": "2"
            },
            "in": "query",
            "name": "page",
            "description": "The requested page. Defaults to 1."
          }
        ],
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/discounts": {
      "post": {
        "summary": "Create a discount",
        "responses": {
          "201": {
            "description": "DiscountResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "post-discounts",
        "description": "Create a discount.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscountPostPayload"
              }
            }
          },
          "description": "DiscountPostPayload"
        },
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [],
        "x-internal": false,
        "tags": [
          "Products"
        ]
      }
    },
    "/discounts/{discount_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "example": "00000000-0000-4000-8000-000000000000"
          },
          "name": "discount_id",
          "in": "path",
          "required": true,
          "description": "The ID of a discount. UUID Version 4."
        }
      ],
      "delete": {
        "summary": "Delete a discount",
        "operationId": "delete-discounts-discount-id",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "description": "Delete a discount.",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [],
        "tags": [
          "Products"
        ]
      }
    },
    "/taxes": {
      "post": {
        "summary": "Create a tax",
        "responses": {
          "201": {
            "description": "TaxResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "post-taxes",
        "description": "Create a tax.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxPostPayload"
              }
            }
          },
          "description": "TaxPostPayload"
        },
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [],
        "x-internal": false,
        "tags": [
          "Products"
        ]
      },
      "parameters": []
    },
    "/taxes/{tax_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "example": "00000000-0000-4000-8000-000000000000"
          },
          "name": "tax_id",
          "in": "path",
          "required": true,
          "description": "The ID of a tax. UUID Version 4."
        }
      ],
      "delete": {
        "summary": "Delete a discount",
        "operationId": "delete-taxes-tax-id",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "description": "Delete a tax.",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [],
        "tags": [
          "Products"
        ]
      }
    }
  },
  "tags": [
    {
      "name": "Addresses",
      "description": "Operations related to addresses."
    },
    {
      "name": "Appointments",
      "description": "Operations related to appointments."
    },
    {
      "name": "Listings",
      "description": "Operations related to listings."
    },
    {
      "name": "Order Forms",
      "description": "Operations related to order forms."
    },
    {
      "name": "Orders",
      "description": "Operations related to orders."
    },
    {
      "name": "Products",
      "description": "Operations related to products."
    },
    {
      "name": "Scheduling",
      "description": "Operations related to scheduling."
    }
  ],
  "components": {
    "securitySchemes": {
      "Token": {
        "description": "A personal access token (token) identifying a user, and sometimes, the user's current group. Tokens may be generated in a group's developer settings. The token should be supplied in the authorization header: `Authorization: Bearer {token}`.",
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "Address": {
        "title": "Address",
        "type": "object",
        "description": "A street address and additional metadata about a location.",
        "x-internal": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "ID of the address. UUID Version 4.",
            "example": "00000000-0000-4000-8000-000000000000",
            "nullable": false
          },
          "latitude": {
            "type": "number",
            "description": "The geographic latitude of some reference point of the location, specified in degrees and decimal parts. Positive numbers must not include the plus symbol.",
            "example": 42.35157458574123,
            "minimum": -180,
            "maximum": 180,
            "nullable": true
          },
          "longitude": {
            "type": "number",
            "description": "The geographic longitude of some reference point of the location, specified in degrees and decimal parts. Positive numbers must not include the plus symbol.",
            "example": -71.05763741484657,
            "maximum": 180,
            "minimum": -180,
            "nullable": true
          },
          "street_number": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "example": "107",
            "description": "The street number portion of a location's address. In some areas, the street number may contain non-numeric characters. This field can also contain extensions and modifiers to the street number, such as \"1/2\" or \"-B\".",
            "nullable": true
          },
          "street_name": {
            "type": "string",
            "description": "The street name portion of a location's address.",
            "minLength": 0,
            "maxLength": 255,
            "example": "South St",
            "nullable": true
          },
          "unit_number": {
            "type": "string",
            "description": "The number or portion of a larger building or complex. Examples are: \"APT G\", \"55\", etc.",
            "minLength": 0,
            "maxLength": 255,
            "example": "Unit 2F",
            "nullable": true
          },
          "postal_code": {
            "type": "string",
            "description": "The postal code portion of a location's address.",
            "example": "02111",
            "minLength": 0,
            "maxLength": 255,
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "The city of a location's address.",
            "example": "Boston",
            "minLength": 0,
            "maxLength": 255,
            "nullable": true
          },
          "city_region": {
            "type": "string",
            "description": "A sub-section or area of a defined city. Examples would be SoHo in New York, NY, Ironbound in Newark, NJ or Inside the Beltway.",
            "minLength": 0,
            "maxLength": 255,
            "example": "Leather District",
            "nullable": true
          },
          "county_or_parish": {
            "type": "string",
            "description": "The County, Parish or other regional authority of the location.",
            "minLength": 0,
            "maxLength": 255,
            "example": "Suffolk County",
            "nullable": true
          },
          "state_or_province": {
            "type": "string",
            "description": "The ISO 3166-2 subdivision code for the state or province of the location. For example, “MA” for Massachusetts, United States.",
            "minLength": 0,
            "maxLength": 255,
            "example": "MA",
            "nullable": true
          },
          "state_or_province_region": {
            "type": "string",
            "description": "A sub-section or area of a defined state or province. Examples would be the Keys in FL or Hudson Valley in NY.",
            "minLength": 0,
            "maxLength": 255,
            "example": "Cape Cod",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "The ISO 3166-1 country code for this for the country of the location.",
            "minLength": 0,
            "maxLength": 255,
            "example": "US",
            "nullable": true
          },
          "country_region": {
            "type": "string",
            "description": "A sub-section or area of a defined country. Examples would be Napa Valley in the US, or the Amalfi Coast in Italy.",
            "example": "Napa Valley",
            "minLength": 0,
            "maxLength": 255,
            "nullable": true
          },
          "timezone": {
            "type": "string",
            "description": "The assumed timezone the address is located in.",
            "minLength": 0,
            "maxLength": 255,
            "example": "America/New_York",
            "nullable": true
          },
          "unparsed_address": {
            "type": "string",
            "description": "Unparsed text representation of the address. ",
            "example": "107 South St, Boston MA, 02111",
            "minLength": 0,
            "maxLength": 255,
            "nullable": true
          },
          "unparsed_address_part_one": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "description": "Unparsed text representation of the first part of the address, typically including the street number, street name, and unit number if applicable.  ",
            "example": "107 South St, Unit 2F",
            "nullable": true
          },
          "unparsed_address_part_two": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "description": "Unparsed text representation of the second part of the address, typically including the city, state or province, and postal code.  ",
            "example": "Boston, MA 02111",
            "nullable": true
          }
        },
        "required": [
          "id"
        ]
      },
      "AddressPostPayload": {
        "title": "AddressPostPayload",
        "type": "object",
        "x-internal": false,
        "properties": {
          "latitude": {
            "type": "number",
            "description": "The geographic latitude of some reference point of the location, specified in degrees and decimal parts. Positive numbers must not include the plus symbol.",
            "example": 42.35157458574123,
            "minimum": -180,
            "maximum": 180,
            "nullable": true
          },
          "longitude": {
            "type": "number",
            "description": "The geographic longitude of some reference point of the location, specified in degrees and decimal parts. Positive numbers must not include the plus symbol.",
            "example": -71.05763741484657,
            "maximum": 180,
            "minimum": -180,
            "nullable": true
          },
          "street_number": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "example": "107",
            "description": "The street number portion of a location's address. In some areas, the street number may contain non-numeric characters. This field can also contain extensions and modifiers to the street number, such as \"1/2\" or \"-B\".",
            "nullable": true
          },
          "street_name": {
            "type": "string",
            "description": "The street name portion of a location's address.",
            "minLength": 0,
            "maxLength": 255,
            "example": "South St",
            "nullable": true
          },
          "unit_number": {
            "type": "string",
            "description": "The number or portion of a larger building or complex. Examples are: \"APT G\", \"55\", etc.",
            "minLength": 0,
            "maxLength": 255,
            "example": "Unit 2F",
            "nullable": true
          },
          "postal_code": {
            "type": "string",
            "description": "The postal code portion of a location's address.",
            "example": "02111",
            "minLength": 0,
            "maxLength": 255,
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "The city of a location's address.",
            "example": "Boston",
            "minLength": 0,
            "maxLength": 255,
            "nullable": true
          },
          "city_region": {
            "type": "string",
            "description": "A sub-section or area of a defined city. Examples would be SoHo in New York, NY, Ironbound in Newark, NJ or Inside the Beltway.",
            "minLength": 0,
            "maxLength": 255,
            "example": "Leather District",
            "nullable": true
          },
          "county_or_parish": {
            "type": "string",
            "description": "The County, Parish or other regional authority of the location.",
            "minLength": 0,
            "maxLength": 255,
            "example": "Suffolk County",
            "nullable": true
          },
          "state_or_province": {
            "type": "string",
            "description": "The ISO 3166-2 subdivision code for the state or province of the location. For example, “MA” for Massachusetts, United States.",
            "minLength": 0,
            "maxLength": 255,
            "example": "MA",
            "nullable": true
          },
          "state_or_province_region": {
            "type": "string",
            "description": "A sub-section or area of a defined state or province. Examples would be the Keys in FL or Hudson Valley in NY.",
            "minLength": 0,
            "maxLength": 255,
            "example": "Cape Cod",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "The ISO 3166-1 country code for this for the country of the location.",
            "minLength": 0,
            "maxLength": 255,
            "example": "US",
            "nullable": true
          },
          "country_region": {
            "type": "string",
            "description": "A sub-section or area of a defined country. Examples would be Napa Valley in the US, or the Amalfi Coast in Italy.",
            "example": "Napa Valley",
            "minLength": 0,
            "maxLength": 255,
            "nullable": true
          }
        },
        "required": [
          "latitude",
          "longitude"
        ]
      },
      "AddressResource": {
        "title": "AddressResource",
        "type": "object",
        "description": "An address.",
        "x-internal": false,
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "data": {
            "$ref": "#/components/schemas/Address"
          }
        },
        "required": [
          "status"
        ]
      },
      "ApiError403": {
        "type": "object",
        "title": "ApiError403",
        "description": "A forbidden error returned by the API.",
        "properties": {
          "status": {
            "type": "string",
            "example": "error",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "message": {
            "type": "string",
            "description": "The error message.",
            "example": "{ApiError message.}",
            "minLength": 0,
            "maxLength": 255,
            "nullable": false
          },
          "code": {
            "type": "integer",
            "description": "A numeric code corresponding to the error.",
            "example": 403,
            "nullable": true
          }
        },
        "required": [
          "status",
          "message"
        ]
      },
      "ApiError404": {
        "type": "object",
        "title": "ApiError404",
        "description": "A not found error returned by the API.",
        "properties": {
          "status": {
            "type": "string",
            "example": "error",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "message": {
            "type": "string",
            "description": "The error message.",
            "example": "{ApiError message.}",
            "minLength": 0,
            "maxLength": 255,
            "nullable": false
          },
          "code": {
            "type": "integer",
            "description": "A numeric code corresponding to the error.",
            "example": 404,
            "nullable": true
          }
        },
        "required": [
          "status",
          "message"
        ]
      },
      "ApiError409": {
        "type": "object",
        "title": "ApiError409",
        "description": "A conflict error returned by the API.",
        "properties": {
          "status": {
            "type": "string",
            "example": "error",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "message": {
            "type": "string",
            "description": "The error message.",
            "example": "{ApiError message.}",
            "minLength": 0,
            "maxLength": 255,
            "nullable": false
          },
          "code": {
            "type": "integer",
            "description": "A numeric code corresponding to the error.",
            "example": 409,
            "nullable": true
          }
        },
        "required": [
          "status",
          "message"
        ]
      },
      "ApiError500": {
        "type": "object",
        "title": "ApiError500",
        "description": "An internal server error returned by the API.",
        "properties": {
          "status": {
            "type": "string",
            "example": "error",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "message": {
            "type": "string",
            "description": "The error message.",
            "example": "{ApiError message.}",
            "minLength": 0,
            "maxLength": 255,
            "nullable": false
          },
          "code": {
            "type": "integer",
            "description": "A numeric code corresponding to the error.",
            "example": 500,
            "nullable": true
          }
        },
        "required": [
          "status",
          "message"
        ]
      },
      "ApiFail422": {
        "type": "object",
        "title": "ApiFail422",
        "description": "A processing or validation failure returned by the API.",
        "properties": {
          "status": {
            "type": "string",
            "example": "fail",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          }
        },
        "required": [
          "status"
        ]
      },
      "Appointment": {
        "title": "Appointment",
        "type": "object",
        "description": "An appointment.",
        "properties": {
          "id": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "description": "The ID of the appointment.",
            "nullable": false
          },
          "status": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "example": "SCHEDULED",
            "description": "The status of the appointment.",
            "nullable": true,
            "enum": [
              "SCHEDULED",
              "UNSCHEDULED",
              "CANCELED"
            ]
          },
          "title": {
            "type": "string",
            "minLength": 0,
            "maxLength": 65536,
            "example": "Appointment title",
            "description": "The title of the appointment.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "minLength": 0,
            "maxLength": 65536,
            "example": "Customer: John Doe\nOrder Details: Order #123",
            "description": "The multi-line description of the appointment.",
            "nullable": true
          },
          "start_at": {
            "type": "string",
            "description": "The date and time (ISO 8601 format) when the appointment is set to start.",
            "format": "date-time",
            "minLength": 0,
            "maxLength": 255,
            "example": "2021-06-30T20:30:00Z",
            "nullable": true
          },
          "end_at": {
            "type": "string",
            "description": "The date and time (ISO 8601 format) when the appointment is set to end.",
            "example": "2021-06-30T20:30:00Z",
            "format": "date-time",
            "minLength": 0,
            "maxLength": 255,
            "nullable": true
          },
          "rescheduled_at": {
            "type": "string",
            "description": "The date and time (ISO 8601 format) when the appointment was rescheduled.",
            "format": "date-time",
            "minLength": 0,
            "maxLength": 255,
            "example": "2021-06-30T20:30:00Z",
            "nullable": true
          },
          "postponed_at": {
            "type": "string",
            "description": "The date and time (ISO 8601 format) when the appointment was postponed.",
            "format": "date-time",
            "minLength": 0,
            "maxLength": 255,
            "example": "2021-06-30T20:30:00Z",
            "nullable": true
          },
          "previous_start_at": {
            "type": "string",
            "description": "The date and time (ISO 8601 format) when the appointment was previously scheduled for.",
            "format": "date-time",
            "minLength": 0,
            "maxLength": 255,
            "example": "2021-06-30T20:30:00Z",
            "nullable": true
          },
          "preference_type": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "example": "TIME",
            "description": "The type of preferred scheduling information provided by a customer to aid in scheduling this appointment.",
            "nullable": true,
            "enum": [
              "ASAP",
              "TIME",
              "TIME_OF_DAY",
              "NONE"
            ]
          },
          "preferred_start_at": {
            "type": "string",
            "description": "A preferred date and time (ISO 8601 format) for when the appointment could start. Only returned if unconfirmed appointment's preference type is TIME. ",
            "format": "date-time",
            "minLength": 0,
            "maxLength": 255,
            "example": "2021-06-30T20:30:00Z",
            "nullable": true
          },
          "preferred_start_at_day": {
            "type": "string",
            "description": "A preferred date (ISO 8601 format) for when the appointment could start. Only returned if unconfirmed appointment's preference type is TIME_OF_DAY. ",
            "format": "date",
            "minLength": 0,
            "maxLength": 255,
            "example": "2021-06-30",
            "nullable": true
          },
          "preferred_start_at_time_of_day": {
            "type": "string",
            "description": "A preferred time of day for when the appointment could start. Only returned if unconfirmed appointment's preference type is TIME_OF_DAY. ",
            "minLength": 0,
            "maxLength": 255,
            "example": "AFTERNOON",
            "nullable": true,
            "enum": [
              "MORNING",
              "MIDDAY",
              "AFTERNOON",
              "TWILIGHT"
            ]
          },
          "duration": {
            "type": "integer",
            "description": "The length of the appointment in minutes.",
            "example": 60,
            "nullable": true
          },
          "user_has_appointments_manage_permission": {
            "type": "boolean",
            "example": true,
            "description": "Does the authorized user have the availability to manage this appointment?"
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "users": {
            "description": "Users attached to the appointment.",
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "items": {
            "type": "array",
            "description": "Items attached to the appointment.",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          },
          "can_cancel": {
            "type": "boolean",
            "example": true,
            "description": "Indicates if the request user can cancel the appointment.",
            "nullable": true
          },
          "can_reschedule": {
            "type": "boolean",
            "example": true,
            "description": "Indicates if the request user can reschedule the appointment.",
            "nullable": true
          },
          "is_within_cancellation_lock_period": {
            "type": "boolean",
            "example": true,
            "description": "Indicates if the appointment is within the cancellation lock period.",
            "nullable": true
          },
          "is_within_rescheduling_lock_period": {
            "type": "boolean",
            "example": true,
            "description": "Indicates if the appointment is within the cancellation lock period.",
            "nullable": true
          }
        },
        "required": [
          "id"
        ]
      },
      "AppointmentCancelPutPayload": {
        "title": "AppointmentCancelPutPayload",
        "type": "object",
        "description": "Payload for canceling an appointment record.",
        "properties": {
          "notify": {
            "type": "boolean",
            "description": "Sends a notification to the appointment's order's customer that the appointment was canceled.",
            "nullable": true,
            "example": true
          }
        }
      },
      "AppointmentCollection": {
        "title": "AppointmentCollection",
        "type": "object",
        "description": "A collection of appointments.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "data": {
            "type": "array",
            "description": "A collection of objects.",
            "items": {
              "$ref": "#/components/schemas/Appointment"
            },
            "nullable": true
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          }
        },
        "required": [
          "status"
        ]
      },
      "AppointmentReschedulePutPayload": {
        "title": "AppointmentReschedulePayload",
        "type": "object",
        "description": "Payload for rescheduling an appointment record.",
        "properties": {
          "start_at": {
            "type": "string",
            "description": "The new date and time (ISO 8601 format) when the appointment is set to start.",
            "example": "2021-06-30T20:30:00Z",
            "minLength": 0,
            "maxLength": 255,
            "nullable": true,
            "format": "date-time"
          },
          "end_at": {
            "type": "string",
            "description": "The new date and time (ISO 8601 format) when the appointment is set to end.",
            "example": "2021-06-30T21:30:00Z",
            "minLength": 0,
            "maxLength": 255,
            "nullable": true,
            "format": "date-time"
          },
          "notify": {
            "type": "boolean",
            "description": "Send a notification to the appointment's order's customer that the appointment was rescheduled.",
            "nullable": true,
            "example": true
          }
        },
        "required": [
          "start_at",
          "end_at"
        ]
      },
      "AppointmentResource": {
        "title": "AppointmentResource",
        "type": "object",
        "description": "An appointment.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "data": {
            "$ref": "#/components/schemas/Appointment"
          }
        },
        "required": [
          "status"
        ]
      },
      "AppointmentUpdatePutPayload": {
        "title": "AppointmentUpdatePutPayload",
        "type": "object",
        "description": "Payload for updating an appointment record.",
        "properties": {
          "start_at": {
            "type": "string",
            "description": "The new date and time (ISO 8601 format) when the appointment is set to start.",
            "example": "2021-06-30T20:30:00Z",
            "minLength": 0,
            "maxLength": 255,
            "nullable": true,
            "format": "date-time"
          },
          "end_at": {
            "type": "string",
            "description": "The new date and time (ISO 8601 format) when the appointment is set to end.",
            "example": "2021-06-30T21:30:00Z",
            "minLength": 0,
            "maxLength": 255,
            "nullable": true,
            "format": "date-time"
          },
          "user_ids": {
            "type": "array",
            "description": "Array of user IDs to attach to the appointment.",
            "items": {
              "description": "ID of a user. UUID Version 4.",
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "format": "uuid",
              "example": "00000000-0000-4000-8000-000000000000"
            }
          },
          "item_ids": {
            "type": "array",
            "description": "Array of order item IDs to attach to the appointment.",
            "items": {
              "description": "ID of an order item. UUID Version 4.",
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "format": "uuid",
              "example": "00000000-0000-4000-8000-000000000000"
            }
          },
          "notify": {
            "type": "boolean",
            "description": "Sends a notification to the appointment's order's customer that the appointment was canceled.",
            "nullable": true,
            "example": true
          }
        }
      },
      "CalendarDay": {
        "description": "A bookable time range with available users.",
        "type": "object",
        "title": "CalendarDay",
        "x-internal": true,
        "properties": {
          "date": {
            "type": "string",
            "minLength": 10,
            "maxLength": 10,
            "example": "2021-01-01",
            "description": "Calendar day that has available timeslots."
          },
          "is_available": {
            "type": "boolean",
            "example": true,
            "description": "Does the day have availability?"
          }
        },
        "required": [
          "date",
          "is_available"
        ]
      },
      "CalendarDayCollection": {
        "title": "CalendarDayCollection",
        "type": "object",
        "description": "A collection of calendar days that have available timeslots",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "data": {
            "type": "array",
            "description": "A collection of objects.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/CalendarDay"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/CalendarDayCollectionMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          }
        },
        "required": [
          "status"
        ]
      },
      "CalendarDayCollectionMeta": {
        "title": "CalendarDayCollectionMeta",
        "type": "object",
        "description": "Metadata about a calendar day paginated response.",
        "properties": {
          "group_id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "description": "The ID of the group.",
            "nullable": true
          },
          "company_id": {
            "type": "string",
            "description": "The ID of the group (company).",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "example": "00000000-0000-4000-8000-000000000000"
          },
          "company_team_member_ids": {
            "type": "array",
            "description": "Array of company team member IDs.",
            "items": {
              "description": "ID of a user. UUID Version 4.",
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "format": "uuid",
              "example": "00000000-0000-4000-8000-000000000000"
            }
          },
          "user_ids": {
            "type": "array",
            "description": "Array of user IDs.",
            "items": {
              "description": "ID of a user. UUID Version 4.",
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "format": "uuid",
              "example": "00000000-0000-4000-8000-000000000000"
            }
          },
          "appointment_id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the appointment that is scheduled to service this order item. UUID Version 4.",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "nullable": true
          },
          "start_at": {
            "type": "string",
            "description": "Range start time.",
            "example": "2021-06-30T20:30:00Z",
            "minLength": 0,
            "maxLength": 255,
            "nullable": true,
            "format": "date-time"
          },
          "end_at": {
            "type": "string",
            "description": "Range end time.",
            "example": "2021-06-30T21:30:00Z",
            "minLength": 0,
            "maxLength": 255,
            "nullable": true,
            "format": "date-time"
          },
          "timezone": {
            "type": "string",
            "description": "The timezone.",
            "minLength": 3,
            "maxLength": 255,
            "example": "CST",
            "nullable": true
          },
          "is_twilight": {
            "type": "boolean",
            "example": true,
            "description": "Is twlight?",
            "nullable": true
          },
          "interval": {
            "type": "integer",
            "example": 30,
            "description": "Interval length.",
            "nullable": true
          },
          "duration": {
            "type": "integer",
            "example": 0,
            "description": "Duration length.",
            "nullable": true
          },
          "current_page": {
            "type": "integer",
            "description": "The current page.",
            "example": 1,
            "nullable": false
          },
          "timeframe": {
            "type": "string",
            "description": "Timeframe.",
            "minLength": 0,
            "maxLength": 255,
            "example": "DAY",
            "nullable": true
          }
        },
        "required": [
          "current_page"
        ]
      },
      "Coupon": {
        "title": "Coupon",
        "type": "object",
        "description": "A coupon contains information about a percent-off or amount-off discount you might want to apply to an order.",
        "properties": {
          "id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the coupon. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "nullable": false
          },
          "name": {
            "type": "string",
            "description": "Name of the coupon displayed to customers on orders.",
            "example": "VIP Customer Discount",
            "nullable": false,
            "minLength": 0,
            "maxLength": 255
          },
          "percent_off": {
            "type": "number",
            "description": "A decimal value representing the percent that will be taken off the subtotal of an order this coupon is applied to. For example, 0.500 would represent an applied discount of 50%, meaning an order with a subtotal of $100 would result in a balance of $50.",
            "format": "float",
            "example": 0.075,
            "minimum": 0,
            "maximum": 1
          },
          "amount_off": {
            "type": "integer",
            "description": "Amount that will be taken off the subtotal of any orders this coupon is applied to. Amount represented in the smallest currency unit (that is, 100 cents for $1.00).",
            "example": 2500
          },
          "promotion_codes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PromotionCode"
            }
          },
          "discountables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Discountable"
            }
          },
          "created_at": {
            "type": "string",
            "description": "The date and time (ISO 8601 format) when the order was created.",
            "format": "date-time",
            "minLength": 0,
            "maxLength": 255,
            "example": "2021-06-30T20:30:00Z",
            "nullable": true
          }
        },
        "required": [
          "id"
        ]
      },
      "CouponCollection": {
        "title": "CouponCollection",
        "type": "object",
        "description": "A collection of coupons.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "data": {
            "type": "array",
            "description": "A collection of objects.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Coupon"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          }
        },
        "required": [
          "status"
        ]
      },
      "CustomerGroup": {
        "title": "CustomerGroup",
        "type": "object",
        "description": "Customer groups are used to group multiple customers together, allowing you to apply settings such as price overrides and billing customer configurations in bulk.",
        "x-internal": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "ID of the address. UUID Version 4.",
            "example": "00000000-0000-4000-8000-000000000000",
            "nullable": false
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 0,
            "description": "The name of the customer group.",
            "example": "John Doe Customer Group",
            "nullable": false
          },
          "affiliate_id": {
            "type": "string",
            "maxLength": 255,
            "minLength": 0,
            "description": "The affliate ID for the customer group.",
            "example": "JOHN_DOE",
            "nullable": true
          },
          "billing_customer": {
            "$ref": "#/components/schemas/Group"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "Discount": {
        "title": "Discount",
        "type": "object",
        "description": "A discount represents the application of a coupon to an order or order item. It includes the calculated amount to be discounted based on the coupon configuration.",
        "properties": {
          "id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the discount. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "nullable": false
          },
          "total_discount_amount": {
            "type": "integer",
            "description": "The total discount amount.",
            "example": 1000
          },
          "coupon": {
            "$ref": "#/components/schemas/Coupon"
          }
        },
        "required": [
          "id"
        ]
      },
      "DiscountAmount": {
        "title": "DiscountAmount",
        "type": "object",
        "description": "A discount amount.",
        "properties": {
          "id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the item. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "nullable": false
          },
          "discount": {
            "$ref": "#/components/schemas/Discount"
          },
          "amount": {
            "type": "integer",
            "example": 2999,
            "description": "The amount of discount that was applied"
          },
          "applied_percent_off": {
            "example": 0.2,
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "description": "Representation of percent off ranging from 0 to 1",
            "nullable": true
          },
          "applied_amount_off": {
            "description": "Amount discounted in cents",
            "example": 2500,
            "type": "integer",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "description": "The date and time (ISO 8601 format) when the order was created.",
            "format": "date-time",
            "minLength": 0,
            "maxLength": 255,
            "example": "2021-06-30T20:30:00Z",
            "nullable": true
          }
        }
      },
      "DiscountPostPayload": {
        "title": "DiscountPostPayload",
        "type": "object",
        "description": "Payload for creating a discount.",
        "properties": {
          "order_id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the order apply this coupon to. UUID Version 4.",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          },
          "coupon_id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the coupon to apply. UUID Version 4.",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          },
          "coupon_data": {
            "type": "object",
            "description": "Data to construct an ad hoc coupon inline to apply to this order. If you create a coupon upfront, pass the coupon_id parameter. Otherwise, this coupon_data will be used to scaffold a new ad hoc Coupon.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the coupon displayed to customers on orders.",
                "example": "VIP Customer Discount",
                "nullable": false,
                "minLength": 0,
                "maxLength": 255
              },
              "percent_off": {
                "type": "number",
                "description": "A decimal value representing the percent that will be taken off the subtotal of an order this coupon is applied to. For example, 0.500 would represent an applied discount of 50%, meaning an order with a subtotal of $100 would result in a balance of $50. Required if amount_off is null.",
                "format": "float",
                "example": 0.075,
                "minimum": 0,
                "maximum": 1
              },
              "amount_off": {
                "type": "integer",
                "description": "Amount that will be taken off the subtotal of any orders this coupon is applied to. Amount represented in the smallest currency unit (that is, 100 cents for $1.00). Required if percent_off is null.",
                "example": 2500
              }
            }
          }
        },
        "required": [
          "order_id"
        ]
      },
      "DiscountResource": {
        "title": "DiscountResource",
        "type": "object",
        "description": "A discount. ",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "data": {
            "$ref": "#/components/schemas/Discount"
          }
        },
        "required": [
          "status"
        ]
      },
      "Discountable": {
        "title": "Discountable",
        "type": "object",
        "description": "A discountable maps a coupon to a product or fee the coupon should exclusively apply to. ",
        "properties": {
          "object": {
            "type": "string",
            "description": "String representing the object’s type. Objects of the same type share the same schema.",
            "example": "DISCOUNTABLE",
            "nullable": false,
            "minLength": 1,
            "maxLength": 100
          },
          "id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the discountable. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "nullable": false
          },
          "discountable": {
            "type": "object",
            "description": "A resource representing a Fee or a Product."
          }
        },
        "required": [
          "id"
        ]
      },
      "FloorPlan": {
        "title": "FloorPlan",
        "type": "object",
        "description": "A scale diagram of the arrangement of a building.",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the floor plan. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "example": "00000000-0000-4000-8000-000000000000",
            "nullable": false
          },
          "original_url": {
            "type": "string",
            "description": "A URL for the original, full-resolution version of the floor plan. Useful for downloading.",
            "example": "https://via.placeholder.com/2500x2000.jpg",
            "minLength": 1,
            "maxLength": 65535,
            "format": "uri",
            "nullable": false
          },
          "large_url": {
            "type": "string",
            "description": "A URL for a large version of the floor plan.",
            "example": "https://via.placeholder.com/1750x1400.jpg",
            "minLength": 1,
            "maxLength": 65535,
            "format": "uri",
            "nullable": false
          },
          "thumbnail_url": {
            "type": "string",
            "description": "A URL for a thumbnail-sized version of the floor plan.",
            "example": "https://via.placeholder.com/250x200.jpg",
            "minLength": 1,
            "maxLength": 65535,
            "format": "uri",
            "nullable": false
          },
          "title": {
            "type": "string",
            "description": "The title (or caption) of the floor plan.",
            "example": "Downstairs floorplan",
            "minLength": 1,
            "maxLength": 255,
            "nullable": true
          },
          "index": {
            "type": "integer",
            "format": "int32",
            "example": 1,
            "minimum": 0,
            "description": "Index order position of the floor plan.",
            "nullable": true
          }
        },
        "required": [
          "id",
          "original_url",
          "large_url",
          "thumbnail_url"
        ]
      },
      "Group": {
        "type": "object",
        "title": "Group",
        "description": "A collection of users that can interact with the Aryeo platform. Permissions and properties are determined based on the group's type which can be creator, agent, or brokerage.",
        "properties": {
          "object": {
            "type": "string",
            "description": "String representing the object’s type. Objects of the same type share the same schema.",
            "example": "GROUP",
            "nullable": false,
            "minLength": 1,
            "maxLength": 100
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "ID of the group. UUID Version 4.",
            "example": "00000000-0000-4000-8000-000000000000",
            "nullable": false
          },
          "type": {
            "type": "string",
            "example": "AGENT",
            "description": "The type of the group. Can be CREATOR, AGENT, or BROKERAGE, and may dictate the attributes of the group returned.",
            "minLength": 0,
            "maxLength": 255,
            "nullable": false,
            "enum": [
              "CREATOR",
              "AGENT",
              "BROKERAGE"
            ]
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 0,
            "description": "The name of the group.",
            "example": "John Doe Reality",
            "nullable": false
          },
          "email": {
            "type": "string",
            "format": "email",
            "minLength": 0,
            "maxLength": 255,
            "example": "john.doe@gmail.com",
            "description": "The email address of a group.",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "example": "6175550173",
            "minLength": 0,
            "maxLength": 255,
            "description": "A phone number represented in whichever standards specified by the group, typically ###-###-#### (separated by hyphens).",
            "nullable": true
          },
          "website_url": {
            "type": "string",
            "example": "https://www.aryeo.com",
            "minLength": 0,
            "maxLength": 255,
            "description": "The website URL of a group.",
            "format": "uri",
            "nullable": true
          },
          "logo_url": {
            "type": "string",
            "description": "The logo URL of a group.",
            "format": "uri",
            "minLength": 0,
            "maxLength": 255,
            "example": "https://via.placeholder.com/300.jpg",
            "nullable": true
          },
          "office_name": {
            "type": "string",
            "example": "John Doe Brokerage",
            "minLength": 0,
            "maxLength": 255,
            "description": "The name of the brokerage or team of a real estate agent. Only returned if group's type is AGENT.",
            "nullable": true
          },
          "license_number": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "example": "12345678",
            "description": "The license number of a real estate agent. Only returned if group's type is AGENT.",
            "nullable": true
          },
          "timezone": {
            "type": "string",
            "maxLength": 255,
            "minLength": 0,
            "description": "The default timezone for the group.",
            "example": "America/New_York",
            "nullable": false
          },
          "slug": {
            "type": "string",
            "maxLength": 255,
            "minLength": 0,
            "description": "The slug for the group.",
            "example": "example-photography",
            "nullable": true
          },
          "order_page_url": {
            "type": "string",
            "maxLength": 255,
            "minLength": 0,
            "description": "The order page URL for the group.",
            "example": "https://example-photography.aryeo.com/order",
            "nullable": true
          },
          "order_page_background_color": {
            "type": "string",
            "maxLength": 7,
            "minLength": 7,
            "description": "The background color for the order page (has a hex value) for the group.",
            "example": "#FF0000",
            "nullable": true
          },
          "social_profiles": {
            "$ref": "#/components/schemas/SocialProfiles"
          },
          "default_order_form": {
            "$ref": "#/components/schemas/OrderForm"
          },
          "use_territory_awareness": {
            "type": "boolean",
            "example": true,
            "description": "Indicates if the order form by default uses territories to filter available users and products.",
            "nullable": true
          },
          "availability_style": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "example": "TIME",
            "description": "The scheduling style the order form should use for timeslot selection by default.",
            "nullable": true,
            "enum": [
              "TIME",
              "TIME_OF_DAY",
              "LEGACY"
            ]
          },
          "slot_interval_minutes": {
            "type": "integer",
            "example": 60,
            "description": "How frequently slotted available times are on the order form by default.",
            "nullable": true
          },
          "use_automated_user_assignment": {
            "type": "boolean",
            "example": true,
            "description": "Indicates if the order form uses auto-assignment of users to appointments.",
            "nullable": true
          },
          "automated_user_assignment_strategy": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "example": "RECOMMENDED",
            "description": "The default assignment strategy the order form should use to assign users to appointments, if applicable.",
            "nullable": true,
            "enum": [
              "RECOMMENDED",
              "DISTANCE",
              "ROUND_ROBIN",
              "PRIORITY_LIST"
            ]
          },
          "show_user_names": {
            "type": "boolean",
            "example": true,
            "description": "Indicates if the order form by default should display user's names after they have been assigned to an appointment.",
            "nullable": true
          },
          "use_instant_appointment_scheduling": {
            "type": "boolean",
            "example": true,
            "description": "Indicates if the order form by default instantly schedules appointments as soon as the order is placed.",
            "nullable": true
          },
          "order_forms": {
            "type": "array",
            "description": "An array of order forms a vendor group provides for placing orders. Only returned if group's type is CREATOR. ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/OrderForm"
            }
          },
          "owner": {
            "$ref": "#/components/schemas/User"
          },
          "users": {
            "type": "array",
            "description": "The Aryeo users associated with this group.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        },
        "required": [
          "id",
          "type",
          "name"
        ]
      },
      "Image": {
        "title": "Image",
        "type": "object",
        "description": "A visual representation of something.",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the image. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "example": "00000000-0000-4000-8000-000000000000",
            "nullable": false
          },
          "thumbnail_url": {
            "type": "string",
            "description": "A URL for a thumbnail-sized version of the image.",
            "example": "https://via.placeholder.com/250x200.jpg",
            "minLength": 1,
            "maxLength": 65535,
            "format": "uri",
            "nullable": false
          },
          "large_url": {
            "type": "string",
            "description": "A URL for a large version of the image.",
            "example": "https://via.placeholder.com/1750x1400.jpg",
            "minLength": 1,
            "maxLength": 65535,
            "format": "uri",
            "nullable": false
          },
          "filename": {
            "type": "string",
            "description": "The name of the file.",
            "example": "image.jpg",
            "minLength": 1,
            "maxLength": 255,
            "nullable": false
          },
          "original_url": {
            "type": "string",
            "description": "A URL for the original, full-resolution version of the image. Useful for downloading.",
            "example": "https://via.placeholder.com/2500x2000.jpg",
            "minLength": 1,
            "maxLength": 65535,
            "format": "uri",
            "nullable": false
          },
          "index": {
            "type": "integer",
            "description": "The order in which the image should be displayed amongst other related images.",
            "example": 2,
            "nullable": true
          },
          "caption": {
            "type": "string",
            "description": "A brief explanation of the image.",
            "example": "This is the front of the house.",
            "minLength": 1,
            "maxLength": 255,
            "nullable": true
          },
          "display_in_gallery": {
            "type": "boolean",
            "description": "Should the image be displayed in a gallery?",
            "example": true,
            "nullable": false
          }
        },
        "required": [
          "id",
          "thumbnail_url",
          "large_url",
          "filename",
          "original_url",
          "display_in_gallery"
        ]
      },
      "InteractiveContent": {
        "title": "InteractiveContent",
        "type": "object",
        "description": "A 3D virtual tour.",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the content. UUID Version 4.",
            "example": "00000000-0000-4000-8000-000000000000",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "nullable": false
          },
          "display_type": {
            "type": "string",
            "description": "Is the content branded, unbranded, or both?",
            "minLength": 1,
            "maxLength": 65535,
            "enum": [
              "BRANDED",
              "UNBRANDED",
              "BOTH"
            ],
            "example": "BRANDED",
            "nullable": false
          },
          "content_type": {
            "type": "string",
            "description": "The type of interactive content.",
            "example": "MATTERPORT",
            "minLength": 1,
            "maxLength": 65535,
            "enum": [
              "MATTERPORT",
              "OTHER"
            ],
            "nullable": false
          },
          "url": {
            "type": "string",
            "description": "URL for the content.",
            "example": "https://my.matterport.com/show/?m=HFaxPzqNFfm",
            "minLength": 1,
            "maxLength": 65535,
            "format": "uri",
            "nullable": false
          },
          "thumbnail_url": {
            "type": "string",
            "description": "A URL for a thumbnail-sized preview of the content.",
            "example": "https://via.placeholder.com/300.jpg",
            "minLength": 1,
            "maxLength": 65535,
            "format": "uri",
            "nullable": true
          }
        },
        "required": [
          "id",
          "display_type",
          "content_type",
          "url"
        ]
      },
      "Listing": {
        "title": "Listing",
        "type": "object",
        "description": "A real estate listing.",
        "properties": {
          "object": {
            "type": "string",
            "description": "String representing the object’s type. Objects of the same type share the same schema.",
            "example": "LISTING",
            "nullable": false,
            "minLength": 1,
            "maxLength": 100
          },
          "id": {
            "type": "string",
            "description": "ID of the listing. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "example": "00000000-0000-4000-8000-000000000000",
            "nullable": false
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "mls_number": {
            "type": "string",
            "description": "The identifier for a listing on its local MLS. ",
            "minLength": 1,
            "maxLength": 100,
            "nullable": true,
            "example": "1850209"
          },
          "type": {
            "type": "string",
            "example": "RESIDENTIAL",
            "description": "General type of the listing, primarily categorizing its use case. Examples include residential and commercial. ",
            "minLength": 1,
            "maxLength": 100,
            "nullable": true,
            "enum": [
              "BUSINESS_OPPORTUNITY",
              "COMMERCIAL_LEASE",
              "COMMERCIAL_SALE",
              "FARM",
              "LAND",
              "MANUFACTURED_IN_PARK",
              "RESIDENTIAL",
              "RESIDENTIAL_INCOME",
              "RESIDENTIAL_LEASE"
            ]
          },
          "sub_type": {
            "type": "string",
            "example": "SINGLE_FAMILY_RESIDENCE",
            "description": "Further specifies the listing type. Examples include family residence and condominium.",
            "minLength": 1,
            "maxLength": 100,
            "nullable": true,
            "enum": [
              "APARTMENT",
              "CONDOMINIUM",
              "DUPLEX",
              "FARM",
              "SINGLE_FAMILY_RESIDENCE",
              "TIMESHARE",
              "TOWNHOUSE",
              "OFFICE"
            ]
          },
          "status": {
            "type": "string",
            "example": "COMING_SOON",
            "description": "Local, regional, or otherwise custom status for the listing used by the parties involved in the listing transaction. While variable, these statuses are typically mapped to the listing's standard status.",
            "minLength": 1,
            "maxLength": 100,
            "nullable": true,
            "enum": [
              "DRAFT",
              "COMING_SOON",
              "FOR_SALE",
              "FOR_LEASE",
              "PENDING_SALE",
              "PENDING_LEASE",
              "SOLD",
              "LEASED",
              "OFF_MARKET"
            ]
          },
          "standard_status": {
            "type": "string",
            "example": "COMING_SOON",
            "description": "The status of the listing as it reflects the state of the contract between the listing agent and seller or an agreement with a buyer, including Active, Active Under Contract, Canceled, Closed, Expired, Pending, and Withdrawn.",
            "minLength": 1,
            "maxLength": 100,
            "nullable": true,
            "enum": [
              "ACTIVE",
              "ACTIVE_UNDER_CONTRACT",
              "CANCELED",
              "CLOSED",
              "COMING_SOON",
              "DELETE",
              "EXPIRED",
              "HOLD",
              "INCOMPLETE",
              "PENDING",
              "WITHDRAWN"
            ]
          },
          "thumbnail_url": {
            "type": "string",
            "minLength": 1,
            "maxLength": 65536,
            "example": "https://via.placeholder.com/640x480.png/0044bb?text=LISTING",
            "description": "A URL for a thumbnail representing the listing.",
            "nullable": true
          },
          "large_thumbnail_url": {
            "type": "string",
            "minLength": 1,
            "maxLength": 65536,
            "example": "https://via.placeholder.com/1280x960.png/0044bb?text=LISTING",
            "description": "A URL for a large thumbnail representing the listing.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the selling points of the building and/or land for sale. ",
            "example": "There are technically no designated parking spots; however, the driveway, on the back of the house, can easily park 3 standard-sized vehicles.",
            "minLength": 1,
            "maxLength": 65535,
            "nullable": true
          },
          "lot": {
            "$ref": "#/components/schemas/ListingLot"
          },
          "building": {
            "$ref": "#/components/schemas/ListingBuilding"
          },
          "price": {
            "$ref": "#/components/schemas/ListingPrice"
          },
          "list_agent": {
            "$ref": "#/components/schemas/Group"
          },
          "co_list_agent": {
            "$ref": "#/components/schemas/Group"
          },
          "images": {
            "type": "array",
            "description": "images",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "videos": {
            "type": "array",
            "description": "videos",
            "items": {
              "$ref": "#/components/schemas/Video"
            }
          },
          "floor_plans": {
            "type": "array",
            "description": "floor_plans",
            "items": {
              "$ref": "#/components/schemas/FloorPlan"
            }
          },
          "interactive_content": {
            "type": "array",
            "description": "interactive_content",
            "items": {
              "$ref": "#/components/schemas/InteractiveContent"
            }
          },
          "property_website": {
            "$ref": "#/components/schemas/PropertyWebsite"
          },
          "marketing_materials": {
            "type": "array",
            "description": "Marketing materials for this listing. ",
            "items": {
              "$ref": "#/components/schemas/MarketingMaterial"
            }
          },
          "orders": {
            "type": "array",
            "description": "orders",
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          },
          "downloads_enabled": {
            "type": "boolean",
            "description": "Are downloads enabled for this listing?",
            "example": true,
            "nullable": false
          },
          "is_showcase": {
            "type": "boolean",
            "description": "Indicates if this is a Showcase listing",
            "example": true,
            "nullable": false
          }
        },
        "required": [
          "object",
          "id",
          "address",
          "downloads_enabled"
        ]
      },
      "ListingBuilding": {
        "title": "ListingBuilding",
        "type": "object",
        "description": "Structural data of the primary building on a listing. Includes everything from square footage of certain spaces to construction dates. ",
        "properties": {
          "bedrooms": {
            "type": "integer",
            "description": "Total number of bedrooms.",
            "example": 4,
            "nullable": true
          },
          "bathrooms": {
            "type": "number",
            "description": "Sum of the number of bathrooms. Represented as a number in order to support half-baths.",
            "example": 3.5,
            "nullable": true
          },
          "square_feet": {
            "type": "number",
            "description": "Total number of square feet.",
            "example": 2511,
            "nullable": true
          },
          "year_built": {
            "type": "integer",
            "description": "Year the property was built.",
            "example": 1960,
            "nullable": true
          },
          "bedrooms_number": {
            "type": "number",
            "description": "Total number of bedrooms.",
            "example": 4,
            "deprecated": true
          }
        }
      },
      "ListingCollection": {
        "title": "ListingCollection",
        "type": "object",
        "description": "A collection of listings.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "data": {
            "type": "array",
            "description": "A collection of objects.",
            "items": {
              "$ref": "#/components/schemas/Listing"
            },
            "nullable": true
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          }
        },
        "required": [
          "status"
        ]
      },
      "ListingLot": {
        "title": "ListingLot",
        "type": "object",
        "description": "Parcel data of the lot of a listing. Includes nearly everything about the land that makes up the listing.",
        "properties": {
          "size_acres": {
            "type": "number",
            "description": "Total area of the lot of a listing in acres. ",
            "example": 0.47,
            "nullable": true,
            "minimum": 0
          },
          "open_parking_spaces": {
            "type": "number",
            "description": "Number of parking spaces.",
            "example": 3,
            "nullable": true,
            "minimum": 0
          }
        }
      },
      "ListingPostPayload": {
        "title": "ListingPostPayload",
        "type": "object",
        "description": "Payload for creating a listing.",
        "properties": {
          "address_id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the address to associate with the listing. UUID Version 4.",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          },
          "list_agent_id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the customer to associate as the listing agent on the listing. UUID Versio",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          },
          "co_list_agent_id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the customer to associate as the co-listing agent on the listing. UUID Version 4.",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          },
          "order_ids": {
            "type": "array",
            "description": "IDs of the orders to associate with this listing. ",
            "items": {
              "type": "string",
              "description": "ID of the item to associate with this order.",
              "format": "uuid",
              "example": "00000000-0000-4000-8000-000000000000",
              "minLength": 36,
              "maxLength": 36
            }
          },
          "sections": {
            "type": "object",
            "description": "Media sections to include for this listing.",
            "properties": {
              "images": {
                "type": "boolean",
                "example": true,
                "default": false,
                "description": "Include the images section when creating this listing. "
              },
              "videos": {
                "type": "boolean",
                "example": true,
                "default": false,
                "description": "Include the videos section when creating this listing. "
              },
              "floor_plans": {
                "type": "boolean",
                "example": true,
                "default": false,
                "description": "Include the floor plans section when creating this listing. "
              },
              "interactive_content": {
                "type": "boolean",
                "example": true,
                "default": false,
                "description": "Include the interactive content section when creating this listing. "
              }
            }
          }
        },
        "required": [
          "address_id"
        ]
      },
      "ListingPrice": {
        "title": "ListingPrice",
        "type": "object",
        "properties": {
          "list_price": {
            "type": "integer",
            "description": "The current price of the listing.",
            "example": 250000,
            "nullable": true,
            "minimum": 0
          }
        },
        "description": "Valuation data relating to the price of a listing."
      },
      "ListingResource": {
        "title": "ListingResource",
        "type": "object",
        "description": "A listing.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "data": {
            "$ref": "#/components/schemas/Listing"
          }
        },
        "required": [
          "status"
        ]
      },
      "MarketingMaterial": {
        "title": "MarketingMaterial",
        "type": "object",
        "description": "A marketing material record.",
        "properties": {
          "id": {
            "type": "string",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "The ID of the marketing material. UUID Version 4.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "example": "New marketing material",
            "description": "The name of the marketing material.",
            "nullable": true
          },
          "thumbnail_url": {
            "type": "string",
            "description": "A URL for a thumbnail-sized preview of the marketing material.",
            "example": "https://via.placeholder.com/250x200.jpg",
            "minLength": 1,
            "maxLength": 65535,
            "format": "uri",
            "nullable": false
          },
          "published_at": {
            "type": "string",
            "description": "The date and time (ISO 8601 format) when the marketing material record was last published.",
            "example": "2021-06-30T20:30:00Z",
            "format": "date-time",
            "minLength": 0,
            "maxLength": 255,
            "nullable": true
          },
          "polotno_json": {
            "$ref": "#/components/schemas/PolotnoJson"
          },
          "listing_download_hash": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-4000-8000-000000000000",
            "minLength": 36,
            "maxLength": 36,
            "description": "The ID of the listing the marketing material belongs to. UUID Version 4.",
            "nullable": true
          },
          "json_updated_at": {
            "type": "number",
            "description": "Timestamp of when the polotno_json field was last updated.",
            "example": 1624057368000,
            "nullable": true
          }
        }
      },
      "Order": {
        "title": "Order",
        "type": "object",
        "description": "A payment request for some content or service.",
        "properties": {
          "id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the order. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "nullable": false
          },
          "number": {
            "type": "integer",
            "description": "A vanity id used for internal tracking of orders for a given vendor.",
            "example": 100,
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "The title of the order, generated by combining the order's number property with the prefix \"Order #\".",
            "example": "Order #100",
            "nullable": false,
            "minLength": 0,
            "maxLength": 255
          },
          "status": {
            "type": "string",
            "description": "The status of the order.",
            "enum": [
              "CONFIRMED",
              "GHOST"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "GHOST",
            "nullable": false
          },
          "fulfillment_status": {
            "type": "string",
            "description": "The fulfillment status of the order.",
            "enum": [
              "FULFILLED",
              "UNFULFILLED"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "FULFILLED",
            "nullable": false
          },
          "payment_status": {
            "type": "string",
            "enum": [
              "PAID",
              "PARTIALLY_PAID",
              "UNPAID"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "PAID",
            "description": "The payment status of the order.",
            "nullable": false
          },
          "internal_notes": {
            "type": "string",
            "minLength": 0,
            "maxLength": 65535,
            "example": "Hey there notes!",
            "description": "Internal order notes.",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "description": "The three-letter ISO 4217 currency code for the currency in which this order was or will be transacted. Must be a supported currency of Aryeo.",
            "example": "USD",
            "minLength": 0,
            "maxLength": 255,
            "enum": [
              "USD",
              "CAD",
              "GBP",
              "CHF",
              "EUR",
              "AUD",
              "NZD",
              "ZAR"
            ]
          },
          "total_amount": {
            "type": "integer",
            "example": 2099,
            "description": "A positive integer in the smallest currency unit (that is, 100 cents for $1.00) representing the total order amount that was or will be charged. This accounts for order items and taxes. ",
            "nullable": false,
            "minimum": 0
          },
          "payment_url": {
            "type": "string",
            "description": "A URL of a publicly-accessible webpage to pay for the order.",
            "example": "https://www.aryeo.com/v2/stripe/checkout/order/00000000-0000-4000-8000-000000000000?pageType=order",
            "maxLength": 65535,
            "minLength": 0,
            "nullable": true
          },
          "status_url": {
            "type": "string",
            "description": "A URL of a publicly-accessible webpage to see the order's status.",
            "example": "https://www.aryeo.com/orders/00000000-0000-4000-8000-000000000000/status",
            "maxLength": 65535,
            "minLength": 0,
            "nullable": true
          },
          "invoice_url": {
            "type": "string",
            "description": "A URL of a publicly-accessible pdf invoice of the order.",
            "example": "https://app.aryeo.test/orders/00000000-0000-4000-8000-000000000000/invoice/download",
            "maxLength": 65535,
            "minLength": 0,
            "nullable": true
          },
          "downloads_allowed": {
            "type": "boolean",
            "description": "Indicates if the current user is allowed to download content from the attached listing.",
            "example": true
          },
          "payments_allowed": {
            "type": "boolean",
            "description": "Indicates if the current user is allowed to make a payment for the order.",
            "example": true
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "customer": {
            "$ref": "#/components/schemas/Group"
          },
          "customer_group": {
            "$ref": "#/components/schemas/CustomerGroup"
          },
          "listing": {
            "$ref": "#/components/schemas/Listing"
          },
          "order_form": {
            "$ref": "#/components/schemas/OrderForm"
          },
          "discounts": {
            "type": "array",
            "description": "The list of discounts applied to the order.",
            "items": {
              "$ref": "#/components/schemas/Discount"
            }
          },
          "tags": {
            "type": "array",
            "description": "The list of tags applied to the order.",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "items": {
            "type": "array",
            "description": "items",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          },
          "appointments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Appointment"
            }
          },
          "unconfirmed_appointments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Appointment"
            }
          },
          "created_at": {
            "type": "string",
            "description": "The date and time (ISO 8601 format) when the order was created.",
            "format": "date-time",
            "minLength": 0,
            "maxLength": 255,
            "example": "2021-06-30T20:30:00Z",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time (ISO 8601 format) when the order was last updated.",
            "format": "date-time",
            "minLength": 0,
            "maxLength": 255,
            "example": "2021-06-30T20:30:00Z",
            "nullable": true
          }
        },
        "required": [
          "id",
          "title",
          "fulfillment_status",
          "payment_status",
          "status_url",
          "downloads_allowed",
          "payments_allowed",
          "created_at",
          "updated_at"
        ]
      },
      "OrderCollection": {
        "title": "OrderCollection",
        "type": "object",
        "description": "A collection of orders.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "data": {
            "type": "array",
            "description": "A collection of objects.",
            "items": {
              "$ref": "#/components/schemas/Order"
            },
            "nullable": true
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          }
        },
        "required": [
          "status"
        ]
      },
      "OrderForm": {
        "title": "OrderForm",
        "type": "object",
        "description": "An order form is a form that is used to submit an order.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-4000-8000-000000000000",
            "minLength": 36,
            "maxLength": 36,
            "description": "ID of the order form. UUID Version 4.",
            "nullable": false
          },
          "title": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "example": "BQ's Photography Order Form",
            "description": "The title or name of the order form.",
            "nullable": false
          },
          "type": {
            "type": "string",
            "description": "The type of the order form, indicating whether the order form is an Aryeo order form or that of another scheduling service provider.",
            "enum": [
              "ARYEO",
              "EXTERNAL"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "ARYEO",
            "nullable": false
          },
          "url": {
            "type": "string",
            "format": "uri",
            "minLength": 0,
            "maxLength": 255,
            "example": "https://www.aryeo.com/order-forms/00000000-0000-4000-8000-000000000000",
            "description": "A URL of a publicly-accessible webpage for this order form.",
            "nullable": false
          },
          "use_territory_awareness": {
            "type": "boolean",
            "example": true,
            "description": "Indicates if the order form is uses territories to filter available users and products.",
            "nullable": false
          },
          "availability_style": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "example": "TIME",
            "description": "The scheduling style the order form should use to for timeslot selection.",
            "nullable": false,
            "enum": [
              "TIME",
              "TIME_OF_DAY",
              "LEGACY"
            ]
          },
          "slot_interval_minutes": {
            "type": "integer",
            "example": 60,
            "description": "How frequently slotted available times are on the order form.",
            "nullable": false
          },
          "use_automated_user_assignment": {
            "type": "boolean",
            "example": true,
            "description": "Indicates if the order form users auto-assignment of users to appointments.",
            "nullable": false
          },
          "automated_user_assignment_strategy": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "example": "RECOMMENDED",
            "description": "The assignment strategy the order form should use to assign users to appointments, if applicable.",
            "nullable": false,
            "enum": [
              "RECOMMENDED",
              "DISTANCE",
              "ROUND_ROBIN",
              "PRIORITY_LIST"
            ]
          },
          "show_user_names": {
            "type": "boolean",
            "example": true,
            "description": "Indicates if the order form should display user's names after they have been assigned to an appointment.",
            "nullable": false
          },
          "require_upfront_payment": {
            "type": "boolean",
            "example": true,
            "description": "Indicates if the order form requires an upfront payment to place the order. ",
            "nullable": false
          },
          "upfront_payment_percentage": {
            "type": "integer",
            "example": 50,
            "description": "The percentage of the order form's total price that should be paid upfront.",
            "nullable": true
          },
          "use_instant_appointment_scheduling": {
            "type": "boolean",
            "example": true,
            "description": "Indicates if the order form instantly schedules appointments as soon as the order is placed.",
            "nullable": false
          }
        },
        "required": [
          "id",
          "title",
          "type",
          "url"
        ]
      },
      "OrderFormCollection": {
        "title": "OrderFormCollection",
        "type": "object",
        "description": "A collection of order forms.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "data": {
            "type": "array",
            "description": "A collection of objects.",
            "items": {
              "$ref": "#/components/schemas/OrderForm"
            },
            "nullable": true
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          }
        },
        "required": [
          "status"
        ]
      },
      "OrderFormSession": {
        "title": "OrderFormSession",
        "type": "object",
        "description": "An order form session is used to pre-fill information about an order being placed via an order form. Through the session, you can also configure other display settings for an order form during that session. ",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-4000-8000-000000000000",
            "minLength": 36,
            "maxLength": 36,
            "description": "ID of the order form. UUID Version 4.",
            "nullable": false
          },
          "order_form": {
            "$ref": "#/components/schemas/OrderForm"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "customer": {
            "$ref": "#/components/schemas/Group"
          },
          "coupons": {
            "description": "Coupons that should be automatically applied during this order form session.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coupon"
            }
          },
          "show_header": {
            "type": "boolean",
            "example": true,
            "description": "If the header of the order form is hidden or shown during the booking process."
          },
          "step_visibility": {
            "type": "object",
            "description": "Settings for hidding or showing certain steps of the order form during the booking process. Note, steps can only be hidden if all required information is supplied in the OrderFormSession.",
            "properties": {
              "show_address_step": {
                "type": "boolean",
                "example": true,
                "description": "If the address step is hidden or shown during the booking process. Only applicable if address_id or address_data parameters are set."
              },
              "show_customer_step": {
                "type": "boolean",
                "example": true,
                "description": "If the customer step is hidden or shown during the booking process. Only applicable if customer_id or customer_data parameters are set."
              }
            }
          },
          "success_url": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "description": "The URL the customer will be directed to after the payment or order placement is successful. By default, customers are directed to the Aryeo order confirmation page.",
            "format": "uri",
            "example": "https://my-company.aryeo.com/order-forms/00000000-0000-4000-8000-000000000000/order-confirmation"
          },
          "url": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "description": "The URL of the order form session. Redirect customers to this URL to take them to correct order form.",
            "format": "uri",
            "example": "https://my-company.aryeo.com/order-form-sessions/00000000-0000-4000-8000-000000000000"
          }
        },
        "required": [
          "id"
        ]
      },
      "OrderFormSessionPostPayload": {
        "title": "OrderFormSessionPostPayload",
        "type": "object",
        "description": "Payload for creating an OrderFormSession to be used for an order form.",
        "properties": {
          "order_form_id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "description": "ID of an order form to associate with the order form session. UUID Version 4."
          },
          "address_id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of an address to associate with the order form session. UUID Version 4.",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          },
          "address_data": {
            "type": "object",
            "description": "Data used to generate a new Address object inline. If you create an address upfront, pass the address_id parameter. Otherwise, this address_data will be used to scaffold a new Address object, if present.",
            "properties": {
              "latitude": {
                "type": "number",
                "description": "The geographic latitude of some reference point of the location, specified in degrees and decimal parts. Positive numbers must not include the plus symbol.",
                "example": 42.35157458574123,
                "minimum": -180,
                "maximum": 180,
                "nullable": true
              },
              "longitude": {
                "type": "number",
                "description": "The geographic longitude of some reference point of the location, specified in degrees and decimal parts. Positive numbers must not include the plus symbol.",
                "example": -71.05763741484657,
                "maximum": 180,
                "minimum": -180,
                "nullable": true
              },
              "street_number": {
                "type": "string",
                "minLength": 0,
                "maxLength": 255,
                "example": "107",
                "description": "The street number portion of a location's address. In some areas, the street number may contain non-numeric characters. This field can also contain extensions and modifiers to the street number, such as \"1/2\" or \"-B\".",
                "nullable": true
              },
              "street_name": {
                "type": "string",
                "description": "The street name portion of a location's address.",
                "minLength": 0,
                "maxLength": 255,
                "example": "South St",
                "nullable": true
              },
              "unit_number": {
                "type": "string",
                "description": "The number or portion of a larger building or complex. Examples are: \"APT G\", \"55\", etc.",
                "minLength": 0,
                "maxLength": 255,
                "example": "Unit 2F",
                "nullable": true
              },
              "postal_code": {
                "type": "string",
                "description": "The postal code portion of a location's address.",
                "example": "02111",
                "minLength": 0,
                "maxLength": 255,
                "nullable": true
              },
              "city": {
                "type": "string",
                "description": "The city of a location's address.",
                "example": "Boston",
                "minLength": 0,
                "maxLength": 255,
                "nullable": true
              },
              "city_region": {
                "type": "string",
                "description": "A sub-section or area of a defined city. Examples would be SoHo in New York, NY, Ironbound in Newark, NJ or Inside the Beltway.",
                "minLength": 0,
                "maxLength": 255,
                "example": "Leather District",
                "nullable": true
              },
              "county_or_parish": {
                "type": "string",
                "description": "The County, Parish or other regional authority of the location.",
                "minLength": 0,
                "maxLength": 255,
                "example": "Suffolk County",
                "nullable": true
              },
              "state_or_province": {
                "type": "string",
                "description": "The ISO 3166-2 subdivision code for the state or province of the location. For example, “MA” for Massachusetts, United States.",
                "minLength": 0,
                "maxLength": 255,
                "example": "MA",
                "nullable": true
              },
              "state_or_province_region": {
                "type": "string",
                "description": "A sub-section or area of a defined state or province. Examples would be the Keys in FL or Hudson Valley in NY.",
                "minLength": 0,
                "maxLength": 255,
                "example": "Cape Cod",
                "nullable": true
              },
              "country": {
                "type": "string",
                "description": "The ISO 3166-1 country code for this for the country of the location.",
                "minLength": 0,
                "maxLength": 255,
                "example": "US",
                "nullable": true
              },
              "country_region": {
                "type": "string",
                "description": "A sub-section or area of a defined country. Examples would be Napa Valley in the US, or the Amalfi Coast in Italy.",
                "example": "Napa Valley",
                "minLength": 0,
                "maxLength": 255,
                "nullable": true
              }
            }
          },
          "customer_id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the customer to associate with the order form session. UUID Version 4.",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          },
          "customer_data": {
            "type": "object",
            "description": "Data used to generate or retrieve a Customer object inline. If you create an customer upfront, pass the customer_id parameter. Otherwise, this customer_data will be used to scaffold a new Customer (Group) object, if present.",
            "properties": {
              "sso_id": {
                "type": "string",
                "maxLength": 255,
                "minLength": 0,
                "example": "auth0_1234567890",
                "description": "Single sign on identifier of the customer user. "
              },
              "email": {
                "type": "string",
                "format": "email",
                "minLength": 0,
                "maxLength": 255,
                "example": "john.doe@gmail.com",
                "description": "Email address of the user.",
                "nullable": false
              },
              "first_name": {
                "type": "string",
                "maxLength": 255,
                "minLength": 0,
                "example": "John",
                "description": "First name of the user.",
                "nullable": true
              },
              "last_name": {
                "type": "string",
                "minLength": 0,
                "maxLength": 255,
                "example": "Doe",
                "description": "Last name of the user.",
                "nullable": true
              },
              "phone": {
                "type": "string",
                "example": "(123) 456-7890",
                "minLength": 0,
                "maxLength": 255,
                "description": "A phone number represented in whichever standards specified by the user, typically ###-###-#### (separated by hyphens).",
                "nullable": true
              }
            }
          },
          "coupon_ids": {
            "type": "array",
            "description": "IDs of the coupons to associate with this order. ",
            "items": {
              "type": "string",
              "description": "ID of the item to associate with this coupon. ",
              "format": "uuid",
              "example": "00000000-0000-4000-8000-000000000000",
              "minLength": 36,
              "maxLength": 36
            }
          },
          "step_visibility": {
            "type": "object",
            "description": "Settings for hidding or showing certain steps of the order form during the booking process. Note, steps can only be hidden if all required information is supplied in the OrderFormSession. By default, all steps are shown.",
            "properties": {
              "show_address_step": {
                "type": "boolean",
                "example": true,
                "description": "If the address step is hidden or shown during the booking process. Only applicable if address_id or address_data parameters are set."
              },
              "show_customer_step": {
                "type": "boolean",
                "example": true,
                "description": "If the customer step is hidden or shown during the booking process. Only applicable if customer_id or customer_data parameters are set."
              }
            }
          },
          "success_url": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "description": "The URL the customer will be directed to after the payment or order placement is successful. By default, customers are directed to the Aryeo order confirmation page.",
            "format": "uri",
            "example": "https://my-company.aryeo.com/order-forms/00000000-0000-4000-8000-000000000000/order-confirmation"
          }
        },
        "required": [
          "order_form_id"
        ]
      },
      "OrderFormSessionResource": {
        "title": "OrderResource",
        "type": "object",
        "description": "An order.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "data": {
            "$ref": "#/components/schemas/OrderFormSession"
          }
        },
        "required": [
          "status"
        ]
      },
      "OrderItem": {
        "title": "OrderItem",
        "type": "object",
        "description": "An individual service or charge of an order. Order items can capture products serviced by or fees applied to an order. ",
        "properties": {
          "id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the item. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "nullable": false
          },
          "title": {
            "type": "string",
            "description": "The title of the item.",
            "example": "Aerial Video",
            "nullable": false,
            "minLength": 0,
            "maxLength": 255
          },
          "subtitle": {
            "type": "string",
            "description": "The sub title of the item.",
            "example": "10 minute video",
            "nullable": false,
            "minLength": 0,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "The description of the item.",
            "example": "A fly-by drone video of the property.",
            "nullable": false,
            "minLength": 0,
            "maxLength": 255
          },
          "purchasable_type": {
            "type": "string",
            "description": "The type of order item.",
            "enum": [
              "PRODUCT_VARIANT",
              "FEE",
              "CUSTOM"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "FEE",
            "nullable": false
          },
          "amount": {
            "type": "integer",
            "example": 2099,
            "description": "A positive integer in the smallest currency unit (that is, 100 cents for $1.00) representing the cost of a single instance of this item. This is multiplied by the quantity to calculate what was or will be charged. Legacy version of unit_price_amount.",
            "nullable": false,
            "minimum": 0
          },
          "unit_price_amount": {
            "type": "integer",
            "example": 2099,
            "description": "A positive integer in the smallest currency unit (that is, 100 cents for $1.00) representing the cost of a single instance of this item. This is multiplied by the quantity to calculate what was or will be charged.",
            "nullable": false,
            "minimum": 0
          },
          "quantity": {
            "type": "integer",
            "example": 2,
            "description": "A positive integer representing the number of instances of this item that was or will be serviced.",
            "nullable": false,
            "minimum": 0
          },
          "gross_total_amount": {
            "type": "integer",
            "example": 4198,
            "description": "A positive integer in the smallest currency unit (that is, 100 cents for $1.00) representing the total cost of this item (before discounts and taxes have been applied) to be charge.",
            "nullable": false,
            "minimum": 0
          },
          "appointment": {
            "$ref": "#/components/schemas/Appointment"
          },
          "discounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountAmount"
            }
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          },
          "product_variant": {
            "$ref": "#/components/schemas/ProductVariant"
          },
          "taxes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tax"
            }
          }
        },
        "required": [
          "id"
        ]
      },
      "OrderItemPostPayload": {
        "title": "OrderItemPostPayload",
        "type": "object",
        "description": "Payload for creating an order item.",
        "properties": {
          "order_id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the order to associate this order item to. UUID Version 4.",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          },
          "product_variant_id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the product variant to create this order item from. UUID Version 4.",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          },
          "quantity": {
            "type": "integer",
            "example": 3,
            "description": "A positive integer representing the number of instances of this item that was or will be serviced."
          },
          "unit_price_amount": {
            "type": "integer",
            "example": 2099,
            "description": "A positive integer in the smallest currency unit (that is, 100 cents for $1.00) representing the cost of a single instance of this item. This is multiplied by the quantity to calculate what was or will be charged. Required when a product variant ID is not specified.",
            "nullable": false,
            "minimum": 0
          },
          "title": {
            "type": "string",
            "description": "The title of the item. Required when a product variant ID is not specified.",
            "example": "Aerial Video",
            "nullable": false,
            "minLength": 0,
            "maxLength": 255
          },
          "subtitle": {
            "type": "string",
            "description": "The subtitle of the item. Required when a product variant ID is not specified.",
            "example": "3000-3999 square feet",
            "nullable": false,
            "minLength": 0,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "The description of the item. Required when a product variant ID is not specified.",
            "example": "A fly-by drone video of the property.",
            "nullable": false,
            "minLength": 0,
            "maxLength": 255
          },
          "appointment_id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the appointment that is scheduled to service this order item. UUID Version 4.",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          },
          "assigned_company_team_member_id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the company team member assigned to this order item. UUID Version 4.",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          }
        },
        "required": [
          "order_id"
        ]
      },
      "OrderItemResource": {
        "title": "OrderItemResource",
        "type": "object",
        "description": "An order item.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "data": {
            "$ref": "#/components/schemas/OrderItem"
          }
        },
        "required": [
          "status"
        ]
      },
      "OrderPostPayload": {
        "title": "OrderPostPayload",
        "type": "object",
        "description": "Payload for creating an order.",
        "properties": {
          "fulfillment_status": {
            "type": "string",
            "description": "The fulfillment status of the order. Defaults to \"UNFULFILLED\".",
            "enum": [
              "FULFILLED",
              "UNFULFILLED"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "FULFILLED",
            "nullable": true
          },
          "internal_notes": {
            "type": "string",
            "description": "Internal notes that will be attached to the order. Viewable only by the team.",
            "minLength": 0,
            "maxLength": 2550,
            "example": "Private note about the order!",
            "nullable": true
          },
          "address_id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the address to associate with the order. UUID Version 4.",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          },
          "customer_id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the customer to associate with the order. UUID Version 4.",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          },
          "notify": {
            "type": "boolean",
            "example": true,
            "description": "Indicates if the customer and creator notifications should be sent when creating the order. Requires an address and customer to be set in order for the notifications to be sent.",
            "nullable": true
          },
          "lock_download_for_payment": {
            "type": "boolean",
            "example": true,
            "description": "Indicates if the downloads for the attached listing should be locked while there is an outstanding balance on the order.",
            "nullable": true
          },
          "allow_payments_before_fulfillment": {
            "type": "boolean",
            "example": true,
            "description": "Indicates if the order will allow payments from the customer before the order is marked as fulfilled.",
            "nullable": true
          },
          "product_items": {
            "type": "array",
            "description": "An array of product items.",
            "items": {
              "type": "object",
              "description": "Variants of this products.",
              "properties": {
                "variant_id": {
                  "type": "string",
                  "example": "00000000-0000-4000-8000-000000000000",
                  "minLength": 36,
                  "maxLength": 36,
                  "format": "uuid",
                  "description": "ID of the product variant to associate with the order item. UUID Version 4."
                },
                "quantity": {
                  "type": "integer",
                  "example": 3,
                  "description": "A positive integer representing the number of instances of this item that was or will be serviced."
                }
              }
            }
          }
        }
      },
      "OrderResource": {
        "title": "OrderResource",
        "type": "object",
        "description": "An order.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "data": {
            "$ref": "#/components/schemas/Order"
          }
        },
        "required": [
          "status"
        ]
      },
      "OrderTagsPutPayload": {
        "title": "OrderTagsPutPayload",
        "type": "object",
        "description": "A request to change the currently authenticated user's password.",
        "properties": {
          "tag_ids": {
            "type": "array",
            "description": "Array of tag IDs to attach to the order.",
            "items": {
              "description": "ID of a tag. UUID Version 4.",
              "type": "string",
              "minLength": 36,
              "maxLength": 36,
              "format": "uuid",
              "example": "00000000-0000-4000-8000-000000000000"
            }
          }
        },
        "required": [
          "tag_ids"
        ]
      },
      "PaginationLinks": {
        "title": "PaginationLinks",
        "type": "object",
        "description": "Related links for a paginated response.",
        "properties": {
          "first": {
            "type": "string",
            "description": "The first page.",
            "example": "https://api.aryeo.com/v1/{path}?page=1",
            "minLength": 1,
            "maxLength": 65535,
            "nullable": false
          },
          "last": {
            "type": "string",
            "description": "The last page.",
            "example": "https://api.aryeo.com/v1/{path}?page=10",
            "minLength": 1,
            "maxLength": 65535,
            "nullable": false
          },
          "prev": {
            "type": "string",
            "description": "The previous page. This is specified as either `string` or `null` purely for spec testing purposes. The model which is autogenerated from this definition will be thrown out and written by-hand.",
            "example": "https://api.aryeo.com/v1/{path}?page=2",
            "minLength": 1,
            "maxLength": 65535,
            "nullable": true
          },
          "next": {
            "type": "string",
            "description": "The next page. This is specified as either `string` or `null` purely for spec testing purposes. The model which is autogenerated from this definition will be thrown out and written by-hand.",
            "example": "https://api.aryeo.com/v1/{path}?page=3",
            "minLength": 1,
            "maxLength": 65535,
            "nullable": true
          }
        },
        "required": [
          "first",
          "last"
        ]
      },
      "PaginationMeta": {
        "title": "PaginationMeta",
        "type": "object",
        "description": "Metadata about a paginated response.",
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total number of records.",
            "example": 50,
            "nullable": false
          },
          "per_page": {
            "type": "integer",
            "description": "Number of records per page.",
            "example": 15,
            "nullable": false
          },
          "current_page": {
            "type": "integer",
            "description": "The current page.",
            "example": 1,
            "nullable": false
          },
          "last_page": {
            "type": "integer",
            "description": "The last page of records.",
            "example": 4,
            "nullable": false
          },
          "from": {
            "type": "integer",
            "description": "The ID of the first record on this page. This is specified as either `integer` or `null` purely for spec testing purposes. The model which is autogenerated from this definition will be thrown out and written by-hand.",
            "example": 1,
            "nullable": true
          },
          "to": {
            "type": "integer",
            "description": "The ID of the last record on this page. This is specified as either `integer` or `null` purely for spec testing purposes. The model which is autogenerated from this definition will be thrown out and written by-hand.",
            "example": 15,
            "nullable": true
          },
          "path": {
            "type": "string",
            "description": "The current paged path.",
            "example": "https://api.aryeo.com/v1/{path}",
            "minLength": 1,
            "maxLength": 65535,
            "nullable": false
          }
        },
        "required": [
          "total",
          "per_page",
          "current_page",
          "last_page",
          "path"
        ]
      },
      "PolotnoJson": {
        "title": "PolotnoJson",
        "type": "object",
        "description": "The JSON representation of a Polotno canvas.",
        "properties": {
          "width": {
            "type": "integer",
            "example": 500,
            "description": "The width of the canvas.",
            "nullable": false
          },
          "height": {
            "type": "integer",
            "example": 500,
            "description": "The height of the canvas.",
            "nullable": false
          }
        },
        "required": [
          "width",
          "height"
        ]
      },
      "Product": {
        "title": "Product",
        "type": "object",
        "description": "A product available for purchase via an order.",
        "properties": {
          "object": {
            "type": "string",
            "description": "String representing the object's type. Objects of the same type share the same schema.",
            "example": "PRODUCT",
            "nullable": false,
            "minLength": 1,
            "maxLength": 100
          },
          "id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the product. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "nullable": false
          },
          "title": {
            "type": "string",
            "description": "The title of the product.",
            "example": "House photos",
            "nullable": false,
            "minLength": 0,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "The description of the product.",
            "example": "Capture photos of a house for sale.",
            "nullable": false,
            "minLength": 0,
            "maxLength": 65536
          },
          "active": {
            "type": "boolean",
            "description": "The active status of a product.",
            "example": true,
            "nullable": false
          },
          "type": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "description": "The type of product.",
            "nullable": false,
            "enum": [
              "MAIN",
              "ADDON"
            ],
            "example": "MAIN"
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductVariant"
            }
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductCategory"
            }
          }
        },
        "required": [
          "id",
          "title",
          "type"
        ]
      },
      "ProductCategory": {
        "title": "ProductCategory",
        "type": "object",
        "description": "A category for products.",
        "properties": {
          "id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the product category. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "nullable": false
          },
          "title": {
            "type": "string",
            "description": "The title of the product category.",
            "example": "Photography",
            "nullable": false,
            "minLength": 0,
            "maxLength": 255
          }
        },
        "required": [
          "id",
          "title"
        ]
      },
      "ProductCategoryCollection": {
        "title": "ProductCatgoryCollection",
        "type": "object",
        "description": "A collection of product categories.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "data": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ProductCategory"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          }
        },
        "required": [
          "status"
        ]
      },
      "ProductCollection": {
        "title": "ProductCollection",
        "type": "object",
        "description": "A collection of products.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "data": {
            "type": "array",
            "description": "A collection of objects.",
            "items": {
              "$ref": "#/components/schemas/Product"
            },
            "nullable": true
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          }
        },
        "required": [
          "status"
        ]
      },
      "ProductVariant": {
        "title": "ProductVariant",
        "type": "object",
        "description": "A variant of a product.",
        "properties": {
          "id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the product variant. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "nullable": false
          },
          "title": {
            "type": "string",
            "description": "The title of the product variant.",
            "example": "House photos",
            "nullable": false,
            "minLength": 0,
            "maxLength": 255
          },
          "price_amount": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (that is, 100 cents for $1.00) representing the price of the product variant.",
            "example": 10000,
            "nullable": false,
            "minimum": 0
          },
          "duration": {
            "type": "integer",
            "example": 60,
            "description": "The duration of the product item, in minutes.",
            "nullable": false,
            "minimum": 0
          }
        },
        "required": [
          "id",
          "title"
        ]
      },
      "PromotionCode": {
        "title": "PromotionCode",
        "type": "object",
        "description": "A Promotion Code represents a customer-redeemable code for a coupon.",
        "properties": {
          "id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the coupon. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "nullable": false
          },
          "code": {
            "type": "string",
            "description": "The customer-facing code. This code must be unique across all active promotion codes.",
            "example": "SPRING_SALE",
            "nullable": false,
            "minLength": 0,
            "maxLength": 255
          }
        },
        "required": [
          "id",
          "code"
        ]
      },
      "PropertyWebsite": {
        "title": "PropertyWebsite",
        "type": "object",
        "description": "Website (in branded and unbranded versions) that displays information about a property.",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the website. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "example": "00000000-0000-4000-8000-000000000000",
            "nullable": false
          },
          "branded_url": {
            "type": "string",
            "description": "URL for branded version of website.",
            "minLength": 1,
            "maxLength": 65535,
            "example": "https://www.aryeo.com/v2/1200-noble-way-flower-mound-1760/branded",
            "format": "uri",
            "nullable": false
          },
          "unbranded_url": {
            "type": "string",
            "description": "URL for unbranded version of website.",
            "minLength": 1,
            "maxLength": 65535,
            "example": "https://www.aryeo.com/v2/1200-noble-way-flower-mound-1760/unbranded",
            "format": "uri",
            "nullable": false
          }
        },
        "required": [
          "id",
          "branded_url",
          "unbranded_url"
        ]
      },
      "SocialProfiles": {
        "title": "SocialProfiles",
        "type": "object",
        "description": "External profile URLs for an agent or brokerage group.",
        "properties": {
          "facebook_profile_url": {
            "type": "string",
            "description": "URL for Facebook.",
            "minLength": 0,
            "maxLength": 65535,
            "example": "https://www.facebook.com/johndoe",
            "format": "uri",
            "nullable": true
          },
          "instagram_profile_url": {
            "type": "string",
            "description": "URL for Instagram.",
            "minLength": 0,
            "maxLength": 65535,
            "example": "https://www.instagram.com/johndoe",
            "format": "uri",
            "nullable": true
          },
          "twitter_profile_url": {
            "type": "string",
            "description": "URL for Twitter.",
            "minLength": 0,
            "maxLength": 65535,
            "example": "https://twitter.com/johndoe",
            "format": "uri",
            "nullable": true
          },
          "linkedin_profile_url": {
            "type": "string",
            "description": "URL for LinkedIn.",
            "minLength": 0,
            "maxLength": 65535,
            "example": "https://www.linkedin.com/in/johndoe/",
            "format": "uri",
            "nullable": true
          },
          "zillow_profile_url": {
            "type": "string",
            "description": "URL for Zillow.",
            "minLength": 0,
            "maxLength": 65535,
            "example": "https://www.zillow.com/profile/johndoe",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "SsoProvider": {
        "type": "object",
        "title": "SsoProvider",
        "description": "A SSO Provider contains the information pertaining to the SSO connection.",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "description": "Name of the provider",
            "example": "Some Company",
            "nullable": false
          },
          "provider": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "description": "Technology of the provider",
            "example": "Auth0",
            "nullable": false
          }
        },
        "required": [
          "name",
          "provider"
        ]
      },
      "SsoUser": {
        "type": "object",
        "title": "SsoUser",
        "description": "A SSO User contains the information pertaining to a users SSO account.",
        "properties": {
          "sso_id": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "description": "SSO ID of the user",
            "example": "1234",
            "nullable": false
          },
          "sso_provider": {
            "$ref": "#/components/schemas/SsoProvider"
          }
        },
        "required": [
          "sso_id"
        ]
      },
      "Tag": {
        "title": "Tag",
        "type": "object",
        "description": "A label attached to something for the purpose of identification or categorization.",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the tag. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "example": "00000000-0000-4000-8000-000000000000",
            "nullable": false
          },
          "name": {
            "type": "string",
            "description": "The name of the tag.",
            "example": "Photography",
            "minLength": 1,
            "maxLength": 255,
            "nullable": false
          },
          "slug": {
            "type": "string",
            "description": "The slug of the tag.",
            "example": "photography",
            "minLength": 1,
            "maxLength": 255,
            "nullable": false
          },
          "color": {
            "type": "string",
            "description": "The background color of the tag.",
            "example": "#8BC34A",
            "minLength": 7,
            "maxLength": 7,
            "nullable": false
          },
          "font_color": {
            "type": "string",
            "description": "The font color of the tag.",
            "example": "#FFFFFF",
            "minLength": 7,
            "maxLength": 7,
            "nullable": false
          }
        },
        "required": [
          "id",
          "name",
          "slug",
          "color",
          "font_color"
        ]
      },
      "Tax": {
        "title": "Tax",
        "type": "object",
        "description": "A tax represents the application of a tax rate to a taxed entity, such as an order or order item. ",
        "properties": {
          "object": {
            "type": "string",
            "description": "String representing the object's type.",
            "minLength": 0,
            "maxLength": 255,
            "example": "TAX"
          },
          "id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the tax. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "nullable": false
          },
          "total_tax_amount": {
            "type": "integer",
            "example": 2099,
            "description": "A positive integer in the smallest currency unit (that is, 100 cents for $1.00) representing the total calculated tax for this tax rate for all applicable order items.",
            "nullable": false,
            "minimum": 0
          },
          "applied_rate": {
            "type": "number",
            "format": "float",
            "example": 0.075,
            "minimum": 0,
            "maximum": 1,
            "description": "A decimal value representing the rate of the parent tax rate at the time of this tax application. For example, 0.075 would represent an applied tax percentage of 7.5%."
          },
          "tax_rate": {
            "$ref": "#/components/schemas/TaxRate"
          }
        },
        "required": [
          "object",
          "id"
        ]
      },
      "TaxPostPayload": {
        "title": "TaxPostPayload",
        "type": "object",
        "description": "Payload for creating a tax.",
        "properties": {
          "order_id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the order apply this tax to. UUID Version 4.",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          },
          "tax_rate_data": {
            "type": "object",
            "description": "Data to construct an ad hoc tax rate inline to apply to this order.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the tax.",
                "example": "New York State Tax",
                "nullable": false,
                "minLength": 0,
                "maxLength": 255
              },
              "description": {
                "type": "string",
                "description": "The description of the tax rate.",
                "example": "Tax rate applied for any property that falls within the bounds New York State.",
                "nullable": false,
                "minLength": 0,
                "maxLength": 65536
              },
              "applied_rate": {
                "type": "number",
                "format": "float",
                "example": 0.075,
                "minimum": 0,
                "maximum": 1,
                "description": "A decimal value representing the rate that should be applied to a taxed entity. For example, 0.075 would represent an applied tax percentage of 7.5%."
              }
            }
          }
        },
        "required": [
          "order_id"
        ]
      },
      "TaxRate": {
        "title": "TaxRate",
        "type": "object",
        "description": "A tax rate represents the percentage of tax that should be applied to a taxed entity.",
        "properties": {
          "object": {
            "type": "string",
            "description": "String representing the object's type.",
            "minLength": 0,
            "maxLength": 255,
            "example": "TAX_RATE"
          },
          "id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the tax rate. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "nullable": false
          },
          "name": {
            "type": "string",
            "description": "The name of the tax.",
            "example": "New York State Tax",
            "nullable": false,
            "minLength": 0,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "The description of the tax rate.",
            "example": "Tax rate applied for any property that falls within the bounds New York State.",
            "nullable": false,
            "minLength": 0,
            "maxLength": 65536
          },
          "applied_rate": {
            "type": "number",
            "format": "float",
            "example": 0.075,
            "minimum": 0,
            "maximum": 1,
            "description": "A decimal value representing the rate that should be applied to a taxed entity. For example, 0.075 would represent an applied tax percentage of 7.5%."
          }
        },
        "required": [
          "object",
          "id"
        ]
      },
      "TaxResource": {
        "title": "TaxResouce",
        "type": "object",
        "description": "A tax response resource.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "data": {
            "$ref": "#/components/schemas/Tax"
          }
        },
        "required": [
          "status"
        ]
      },
      "Territory": {
        "title": "Territory",
        "type": "object",
        "description": "A region where a company offers services. ",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the territory. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "example": "00000000-0000-4000-8000-000000000000",
            "nullable": false
          },
          "name": {
            "type": "string",
            "description": "The name of the territory.",
            "example": "New York City",
            "minLength": 1,
            "maxLength": 255,
            "nullable": false
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "TerritoryCollection": {
        "title": "TerritoryCollection",
        "type": "object",
        "description": "A collection of territories.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "data": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Territory"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          }
        },
        "required": [
          "status"
        ]
      },
      "Timeslot": {
        "description": "A bookable time range, including users that are available.",
        "type": "object",
        "title": "Timeslot",
        "x-internal": true,
        "properties": {
          "start_at": {
            "type": "string",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-01-01T00:00:00Z",
            "description": "Start time of the available slot"
          },
          "end_at": {
            "type": "string",
            "minLength": 20,
            "maxLength": 20,
            "example": "2021-01-01T00:30:00Z",
            "description": "End time of the available slot"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        },
        "required": [
          "start_at",
          "end_at"
        ]
      },
      "TimeslotCollection": {
        "title": "TimeslotCollection",
        "type": "object",
        "description": "A collection of bookable timeslots.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "data": {
            "type": "array",
            "description": "A collection of objects.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/Timeslot"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/CalendarDayCollectionMeta"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          }
        },
        "required": [
          "status"
        ]
      },
      "User": {
        "type": "object",
        "title": "User",
        "description": "A record of a person on the Aryeo platform.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "ID of the user. UUID Version 4.",
            "example": "00000000-0000-4000-8000-000000000000",
            "nullable": false
          },
          "email": {
            "type": "string",
            "format": "email",
            "minLength": 0,
            "maxLength": 255,
            "example": "john.doe@gmail.com",
            "description": "Email address of the user.",
            "nullable": false
          },
          "first_name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 0,
            "example": "John",
            "description": "First name of the user.",
            "nullable": true
          },
          "last_name": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "example": "Doe",
            "description": "Last name of the user.",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "example": "123456789",
            "minLength": 0,
            "maxLength": 255,
            "description": "A phone number represented in whichever standards specified by the user, typically ###-###-#### (separated by hyphens).",
            "nullable": true
          },
          "avatar_url": {
            "type": "string",
            "format": "uri",
            "example": "https://via.placeholder.com/300.jpg",
            "description": "The avatar image URL of a user.",
            "minLength": 0,
            "maxLength": 255,
            "nullable": true
          },
          "relationship": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "example": "owner",
            "description": "Describes user's relationship (access level) to a specified group. Only returned if this resource is returned as a sub-resource of a group.",
            "nullable": true
          },
          "sso_users": {
            "type": "array",
            "description": "The list of SSO users associated with this user.",
            "items": {
              "$ref": "#/components/schemas/SsoUser"
            }
          }
        },
        "required": [
          "id",
          "email"
        ]
      },
      "Video": {
        "title": "Video",
        "type": "object",
        "description": "A recording of moving visual images. Provided either as a download URL (MP4) or a link (e.g. YouTube, Vimeo).",
        "properties": {
          "id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the video. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "nullable": false
          },
          "title": {
            "type": "string",
            "example": "The New Vimeo Player (You Know, For Videos)",
            "description": "The title of the video given by the uploading user.",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true
          },
          "duration": {
            "type": "integer",
            "description": "The video's runtime in seconds.",
            "example": 360,
            "nullable": true
          },
          "display_type": {
            "type": "string",
            "example": "BRANDED",
            "description": "The display type determines if the video is branded or unbranded (can also be none or both). This affects whether the video is displayed on branded or unbranded marketing materials such as the property website.",
            "maxLength": 255,
            "minLength": 1,
            "enum": [
              "BRANDED",
              "UNBRANDED",
              "BOTH",
              "NONE"
            ],
            "nullable": false
          },
          "source_type": {
            "type": "string",
            "example": "OPTIMIZED",
            "description": "The original upload source of the video, used to determine how to handle the playback_url of the video and other display properties. ",
            "maxLength": 255,
            "minLength": 1,
            "enum": [
              "YOUTUBE",
              "VIMEO",
              "OPTIMIZED",
              "UPLOADED",
              "LINK"
            ],
            "nullable": false
          },
          "thumbnail_url": {
            "type": "string",
            "description": "A thumbnail image URL for the video.",
            "minLength": 0,
            "maxLength": 65535,
            "example": "https://via.placeholder.com/300.jpg",
            "format": "uri",
            "nullable": false
          },
          "playback_url": {
            "type": "string",
            "description": "A URL linking to playback stream of the video.",
            "minLength": 0,
            "maxLength": 65535,
            "example": "https://player.vimeo.com/video/76979871",
            "format": "uri",
            "nullable": false
          },
          "download_url": {
            "type": "string",
            "description": "A URL for downloading the video.",
            "example": "https://videos.aryeo.com/listings/00000000-0000-4000-8000-000000000000/00000000-0000-4000-8000-000000000000.mp4",
            "maxLength": 65535,
            "format": "uri",
            "minLength": 1,
            "nullable": true
          },
          "share_url": {
            "type": "string",
            "format": "uri",
            "description": "A URL linking to a public viewing optimized webpage the video.",
            "example": "https://www.aryeo.com/v2/00000000-0000-4000-8000-000000000000/videos/1",
            "minLength": 0,
            "maxLength": 65535,
            "nullable": true
          }
        },
        "required": [
          "id",
          "display_type",
          "source_type",
          "thumbnail_url",
          "playback_url"
        ]
      },
      "VideoPutPayload": {
        "title": "VideoPutPayload",
        "type": "object",
        "description": "Payload to update a video.",
        "properties": {
          "title": {
            "type": "string",
            "description": "The name of the video.",
            "example": "Home Walkthrough Video",
            "minLength": 1,
            "maxLength": 100,
            "nullable": false
          }
        },
        "required": [
          "title"
        ]
      },
      "VideoResource": {
        "title": "VideoResource",
        "type": "object",
        "description": "A video.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "data": {
            "$ref": "#/components/schemas/Video"
          }
        },
        "required": [
          "status"
        ]
      }
    }
  }
}