{
  "openapi": "3.0.0",
  "info": {
    "title": "Aryeo",
    "version": "2021-06-17",
    "description": "# Introduction\nThe Aryeo API provides access to the Aryeo platform. You can use your favorite HTTP/REST library for interfacing with the Aryeo API, or you can use one of our SDKs. We support a variety of languages and frameworks that are a great starting point for experimenting with the API. If there is an additional language or framework that you want to see supported, then please reach out and make a contribution!\n\n<div class=\"w-100\"><a class=\"btn btn-lang btn-lang-dart m-2\" href=\"https://github.com/AryeoHQ/aryeo-api-dart-sdk\"></a><a class=\"btn btn-lang btn-lang-go m-2\" href=\"https://github.com/AryeoHQ/aryeo-api-go-sdk\"></a><a class=\"btn btn-lang btn-lang-js m-2\" href=\"https://github.com/AryeoHQ/aryeo-api-js-sdk\"></a><a class=\"btn btn-lang btn-lang-php m-2\" href=\"https://github.com/AryeoHQ/aryeo-api-php-sdk\"></a><a class=\"btn btn-lang btn-lang-ruby m-2\" href=\"https://github.com/AryeoHQ/aryeo-api-ruby-sdk\"></a><a class=\"btn btn-lang btn-lang-rust m-2\" href=\"https://github.com/AryeoHQ/aryeo-api-rust-sdk\"></a><a class=\"btn btn-lang btn-lang-swift m-2\" href=\"https://github.com/AryeoHQ/aryeo-api-swift-sdk\"></a></div>\n\n**Note**: Currently, our SDKs generate some duplicate models. For example, `Listing` and `Listing1`. Each of these models are identical, despite their naming. We hope to resolve this in future versions.\n\n**Note**: Some SDKs may require you to manually add the `Accept` header to all Aryeo API requests. If so, use the value `application/json`.\n\n# Version Pinning\nThe Aryeo API is versioned. This documentation refers to the most recent version of the API; however, it is possible to use older versions of the API on a request-by-request basis. To explicitly use an older version, pass the `Aryeo-Version` header with a value for the version you would like to use.\n\n**Example**: `Aryeo-Version: 2021-06-17`\n\nInformation about each API version can be found in the releases section of the [documentation repository](https://github.com/AryeoHQ/aryeo-api-docs).\n\n# The Include Parameter\nSome endpoints provide a special `include` query parameter. This parameter allows the client to control the nested relations returned by an API response. For example, if a client only needs minimum information, then it may choose to omit the `include` parameter entirely. Or, if a client wants all possible information, then it may provide all possible values in the `include` parameter. This will have the side-effect of increasing the request's latency, but that may be advantageous depending on the client's use case.\n\n**Hint**: To see all possible values for the `include`  parameter, use an erroneous value such as `./path?include=fake` when making a request. Then, the API will respond with all allowed `include` values for that endpoint.\n",
    "contact": {
      "name": "Admin",
      "url": "https://www.aryeo.com",
      "email": "jarrod@aryeo.com"
    },
    "termsOfService": "https://www.aryeo.com/legal/terms-of-service",
    "x-logo": {
      "url": "https://raw.githubusercontent.com/jarrodparkes/images/master/aryeo-square.svg",
      "backgroundColor": "#fafafa"
    },
    "license": {
      "url": "https://choosealicense.com/licenses/apache-2.0/",
      "name": "Apache 2.0"
    }
  },
  "servers": [
    {
      "url": "https://api.aryeo.com/v1",
      "description": "Production"
    }
  ],
  "paths": {
    "/appointments": {
      "get": {
        "summary": "List all appointments.",
        "tags": [
          "appointments"
        ],
        "responses": {
          "200": {
            "description": "AppointmentCollection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentCollection"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-appointments",
        "description": "List all appointments. By default, returns a list of appointments that have been scheduled and have not been canceled",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "order,users"
            },
            "in": "query",
            "name": "include",
            "description": "Comma separated list of optional data to include in the response.",
            "allowEmptyValue": true
          },
          {
            "schema": {
              "type": "string",
              "example": "UPCOMING",
              "minLength": 1,
              "maxLength": 100,
              "enum": [
                "PAST",
                "UPCOMING"
              ]
            },
            "in": "query",
            "name": "filter[tense]",
            "description": "Return appointments that are upcoming or in the past."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 100,
              "format": "date-time",
              "example": "2021-01-01T13:00:00Z"
            },
            "in": "query",
            "name": "filter[start_at_gte]",
            "description": "Return appointments where the start_at field is greater than or equal to this value. Effectively, appointments that start after this date."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 100,
              "format": "date-time",
              "example": "2021-01-02T13:00:00Z"
            },
            "in": "query",
            "name": "filter[start_at_lte]",
            "description": "Return appointments where the start_at field is less than or equal to this value. Effectively, appointments that start before this date."
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "description": "ID of a user. UUID Version 4.",
                "type": "string",
                "minLength": 36,
                "maxLength": 36,
                "format": "uuid",
                "example": "00000000-0000-4000-8000-000000000000"
              }
            },
            "in": "query",
            "name": "filter[user_ids]",
            "description": "The IDs of users whose appointments will be retrieved. UUID Version 4."
          },
          {
            "schema": {
              "type": "string",
              "example": "-created_at",
              "minLength": 1,
              "maxLength": 100
            },
            "in": "query",
            "name": "sort",
            "description": "Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to `-start_at`."
          },
          {
            "schema": {
              "type": "string",
              "example": "25",
              "minLength": 1,
              "maxLength": 5
            },
            "in": "query",
            "name": "per_page",
            "description": "The number of items per page. Defaults to 25."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 5,
              "example": "2"
            },
            "in": "query",
            "name": "page",
            "description": "The requested page. Defaults to 1."
          }
        ],
        "security": [
          {
            "Token": []
          }
        ],
        "x-internal": false
      }
    },
    "/appointments/{appointment_id}/cancel": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "format": "uuid",
            "minLength": 0,
            "maxLength": 255,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "name": "appointment_id",
          "in": "path",
          "required": true,
          "description": "The ID of an appointment."
        }
      ],
      "put": {
        "summary": "Cancel an appointment.",
        "operationId": "put-appointments-appointment-id-cancel",
        "responses": {
          "200": {
            "description": "AppointmentResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "409": {
            "description": "ApiError409",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError409"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "description": "Cancel an appointment. The appointments order's customer can be optionally notified of this change. ",
        "security": [
          {
            "Token": []
          }
        ],
        "tags": [
          "appointments"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppointmentCancelPutPayload"
              }
            }
          }
        }
      }
    },
    "/appointments/{appointment_id}/reschedule": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "format": "uuid",
            "minLength": 0,
            "maxLength": 255,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "name": "appointment_id",
          "in": "path",
          "required": true,
          "description": "The ID of an appointment."
        }
      ],
      "put": {
        "summary": "Reschedule an appointment.",
        "operationId": "put-appointments-appointment-id-reschedule",
        "responses": {
          "200": {
            "description": "AppointmentResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "409": {
            "description": "ApiError409",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError409"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "description": "Reschedule an appointment. The appointments order's customer can be optionally notified of this change. ",
        "security": [
          {
            "Token": []
          }
        ],
        "tags": [
          "appointments"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppointmentReschedulePutPayload"
              }
            }
          }
        }
      }
    },
    "/listings": {
      "get": {
        "summary": "List all listings.",
        "tags": [
          "listings"
        ],
        "responses": {
          "200": {
            "description": "ListingCollection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingCollection"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-listings",
        "description": "Lists all listings available to a group.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "images,videos,orders"
            },
            "in": "query",
            "name": "include",
            "description": "Comma separated list of optional data to include in the response.",
            "allowEmptyValue": true
          },
          {
            "schema": {
              "type": "string",
              "example": "123 Main St",
              "minLength": 1,
              "maxLength": 255
            },
            "in": "query",
            "name": "filter[search]",
            "description": "Return listings that have fields matching this term."
          },
          {
            "schema": {
              "type": "string",
              "example": "123 Main St",
              "minLength": 1,
              "maxLength": 255
            },
            "in": "query",
            "name": "filter[address]",
            "description": "Return listings that have an address matching this term."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255,
              "example": "John Doe"
            },
            "in": "query",
            "name": "filter[list_agent]",
            "description": "Return listings that have a listing agent or co-listing agent matching this term."
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "DRAFT",
                "COMING_SOON",
                "FOR_LEASE",
                "FOR_SALE",
                "PENDING_SALE",
                "PENDING_LEASE",
                "SOLD",
                "LEASED",
                "OFF_MARKET",
                "null"
              ],
              "example": "FOR_SALE",
              "minLength": 1,
              "maxLength": 100
            },
            "in": "query",
            "name": "filter[status]",
            "description": "Return listings that have a certain status."
          },
          {
            "schema": {
              "type": "boolean",
              "minLength": 0,
              "maxLength": 255,
              "example": true
            },
            "in": "query",
            "name": "filter[active]",
            "description": "Set as true to return listings that have an active status (e.g. active statuses include `COMING_SOON`, `FOR_SALE`, `FOR_LEASE`, `PENDING_SALE`, `PENDING_LEASE`, `SOLD`, `LEASED`). "
          },
          {
            "schema": {
              "type": "number",
              "example": 100000
            },
            "in": "query",
            "name": "filter[price_gte]",
            "description": "Return listings where the price field is greater than or equal to this value."
          },
          {
            "schema": {
              "type": "number",
              "example": 4000000
            },
            "in": "query",
            "name": "filter[price_lte]",
            "description": "Return listings where the price field is less than or equal to this value."
          },
          {
            "schema": {
              "type": "number",
              "example": 1000
            },
            "in": "query",
            "name": "filter[square_feet_gte]",
            "description": "Return listings where the square feet field is greater than or equal to this value."
          },
          {
            "schema": {
              "type": "number",
              "example": 5000
            },
            "in": "query",
            "name": "filter[square_feet_lte]",
            "description": "Return listings where the square feet field is less than or equal to this value."
          },
          {
            "schema": {
              "type": "integer",
              "example": 2
            },
            "in": "query",
            "name": "filter[bedrooms_gte]",
            "description": "Return listings where the bedrooms field is greater than or equal to this value."
          },
          {
            "schema": {
              "type": "integer",
              "example": 4
            },
            "in": "query",
            "name": "filter[bedrooms_lte]",
            "description": "Return listings where the bedrooms field is less than or equal to this value."
          },
          {
            "schema": {
              "type": "number",
              "example": 2.5
            },
            "in": "query",
            "name": "filter[bathrooms_gte]",
            "description": "Return listings where the bathrooms field is greater than or equal to this value."
          },
          {
            "schema": {
              "type": "number",
              "example": 5
            },
            "in": "query",
            "name": "filter[bathrooms_lte]",
            "description": "Return listings where the bathrooms field is less than or equal to this value."
          },
          {
            "schema": {
              "type": "string",
              "example": "-created_at",
              "minLength": 1,
              "maxLength": 100
            },
            "in": "query",
            "name": "sort",
            "description": "Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to `-created_at`."
          },
          {
            "schema": {
              "type": "string",
              "example": "25",
              "minLength": 1,
              "maxLength": 5
            },
            "in": "query",
            "name": "per_page",
            "description": "The number of items per page. Defaults to 25."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 5,
              "example": "2"
            },
            "in": "query",
            "name": "page",
            "description": "The requested page. Defaults to 1."
          }
        ],
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/listings/{listing_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "example": "00000000-0000-4000-8000-000000000000"
          },
          "name": "listing_id",
          "in": "path",
          "required": true,
          "description": "The ID of a listing. UUID Version 4."
        }
      ],
      "get": {
        "summary": "Retrieve a listing.",
        "tags": [
          "listings"
        ],
        "responses": {
          "200": {
            "description": "ListingResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-listings-id",
        "description": "Retrieves the details of a listing with the given ID.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "images,videos,orders"
            },
            "in": "query",
            "name": "include",
            "description": "Comma separated list of optional data to include in the response.",
            "allowEmptyValue": true
          }
        ],
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/products": {
      "get": {
        "summary": "List all products.",
        "responses": {
          "200": {
            "description": "ProductCollection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCollection"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-products",
        "description": "List all products of a group.",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "-created_at",
              "minLength": 1,
              "maxLength": 100
            },
            "in": "query",
            "name": "sort",
            "description": "Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to `title`."
          },
          {
            "schema": {
              "type": "string",
              "example": "25",
              "minLength": 1,
              "maxLength": 5
            },
            "in": "query",
            "name": "per_page",
            "description": "The number of items per page. Defaults to 25."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 5,
              "example": "2"
            },
            "in": "query",
            "name": "page",
            "description": "The requested page. Defaults to 1."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "Photography"
            },
            "in": "query",
            "name": "filter[search]",
            "description": "Return products that have fields matching this term."
          },
          {
            "schema": {
              "type": "boolean",
              "example": true
            },
            "in": "query",
            "name": "filter[include_inactive]",
            "description": "Include inactive products (in addition to active products) when returning products."
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "description": "ID of a category. UUID Version 4.",
                "type": "string",
                "minLength": 36,
                "maxLength": 36,
                "format": "uuid",
                "example": "00000000-0000-4000-8000-000000000000"
              }
            },
            "in": "query",
            "name": "filter[category_ids]",
            "description": "Return products in the given categories."
          },
          {
            "schema": {
              "type": "string",
              "example": "MAIN",
              "minLength": 0,
              "maxLength": 255
            },
            "in": "query",
            "name": "filter[type]",
            "description": "Return products matching the given type. Allowed values are: MAIN, ADDON."
          }
        ],
        "tags": [
          "orders"
        ]
      },
      "parameters": []
    },
    "/orders": {
      "get": {
        "summary": "List all orders.",
        "responses": {
          "200": {
            "description": "OrderCollection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCollection"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-orders",
        "description": "Lists all orders of a group.",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "-created_at",
              "minLength": 1,
              "maxLength": 100
            },
            "in": "query",
            "name": "sort",
            "description": "Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to `-created_at`."
          },
          {
            "schema": {
              "type": "string",
              "example": "25",
              "minLength": 1,
              "maxLength": 5
            },
            "in": "query",
            "name": "per_page",
            "description": "The number of items per page. Defaults to 25."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 5,
              "example": "2"
            },
            "in": "query",
            "name": "page",
            "description": "The requested page. Defaults to 1."
          }
        ],
        "tags": [
          "orders"
        ]
      },
      "post": {
        "summary": "Create an order.",
        "operationId": "post-orders",
        "responses": {
          "201": {
            "description": "OrderResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "409": {
            "description": "ApiError409",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError409"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "description": "Create an order.",
        "tags": [
          "orders"
        ],
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderPostPayload"
              }
            }
          },
          "description": "OrderPostPayload"
        }
      }
    },
    "/orders/{order_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "example": "00000000-0000-4000-8000-000000000000"
          },
          "name": "order_id",
          "in": "path",
          "required": true,
          "description": "The ID of an order. UUID Version 4."
        }
      ],
      "get": {
        "summary": "Retrieve an order.",
        "tags": [
          "orders"
        ],
        "responses": {
          "200": {
            "description": "OrderResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-orders-id",
        "description": "Retrieves the details of an order with the given ID.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "items,appointments,unconfirmed_appointments"
            },
            "in": "query",
            "name": "include",
            "description": "Comma separated list of optional data to include in the response.",
            "allowEmptyValue": true
          }
        ],
        "security": [
          {
            "Token": []
          }
        ]
      }
    },
    "/unconfirmed-appointments": {
      "get": {
        "summary": "List all unconfirmed appointments.",
        "tags": [
          "appointments"
        ],
        "responses": {
          "200": {
            "description": "UnconfirmedAppointmentCollection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnconfirmedAppointmentCollection"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-unconfirmed-appointments",
        "description": "List all unconfirmed appointments. These are appointments that have not been scheduled. ",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "order,users"
            },
            "in": "query",
            "name": "include",
            "description": "Comma separated list of optional data to include in the response.",
            "allowEmptyValue": true
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "description": "ID of a user. UUID Version 4.",
                "type": "string",
                "minLength": 36,
                "maxLength": 36,
                "format": "uuid",
                "example": "00000000-0000-4000-8000-000000000000"
              }
            },
            "in": "query",
            "name": "filter[user_ids]",
            "description": "The IDs of users whose appointments will be retrieved. UUID Version 4."
          },
          {
            "schema": {
              "type": "string",
              "example": "-created_at",
              "minLength": 1,
              "maxLength": 100
            },
            "in": "query",
            "name": "sort",
            "description": "Comma separated list of fields used for sorting. Placing a minus symbol in front of a field name sorts in descending order. Defaults to `-start_at`."
          },
          {
            "schema": {
              "type": "string",
              "example": "25",
              "minLength": 1,
              "maxLength": 5
            },
            "in": "query",
            "name": "per_page",
            "description": "The number of items per page. Defaults to 25."
          },
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 5,
              "example": "2"
            },
            "in": "query",
            "name": "page",
            "description": "The requested page. Defaults to 1."
          }
        ],
        "security": [
          {
            "Token": []
          }
        ],
        "x-internal": false
      },
      "parameters": []
    },
    "/unconfirmed-appointments/{unconfirmed_appointment_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "format": "uuid",
            "minLength": 0,
            "maxLength": 255,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "name": "unconfirmed_appointment_id",
          "in": "path",
          "required": true,
          "description": "The ID of an appointment."
        }
      ],
      "get": {
        "summary": "Retrieve an unconfirmed appointment.",
        "tags": [
          "appointments"
        ],
        "responses": {
          "200": {
            "description": "UnconfirmedAppointmentResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnconfirmedAppointmentResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-unconfirmed-appointments-id",
        "description": "Retrieves the details of an unconfirmed appointment with the given ID.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "order,users"
            },
            "in": "query",
            "name": "include",
            "description": "Comma separated list of optional data to include in the response.",
            "allowEmptyValue": true
          }
        ],
        "security": [
          {
            "Token": []
          }
        ],
        "x-internal": false
      }
    },
    "/vendors": {
      "get": {
        "summary": "List all vendors.",
        "responses": {
          "200": {
            "description": "GroupCollection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupCollection"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-vendors",
        "description": "Lists all vendors available to a group.",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "users"
            },
            "in": "query",
            "name": "include",
            "description": "Comma separated list of optional data to include in the response.",
            "allowEmptyValue": true
          }
        ],
        "tags": [
          "vendors"
        ]
      }
    },
    "/vendors/{vendor_id}": {
      "get": {
        "summary": "Retrieve a vendor.",
        "responses": {
          "200": {
            "description": "GroupResource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResource"
                }
              }
            }
          },
          "403": {
            "description": "ApiError403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError403"
                }
              }
            }
          },
          "404": {
            "description": "ApiError404",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError404"
                }
              }
            }
          },
          "422": {
            "description": "ApiFail422",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFail422"
                }
              }
            }
          },
          "500": {
            "description": "ApiError500",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError500"
                }
              }
            }
          }
        },
        "operationId": "get-vendors-id",
        "description": "Retrieves the details of a vendor with the given ID.",
        "security": [
          {
            "Token": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 0,
              "maxLength": 255,
              "example": "default_order_form"
            },
            "in": "query",
            "name": "include",
            "description": "Comma separated list of optional data to include in the response.",
            "allowEmptyValue": true
          }
        ],
        "tags": [
          "vendors"
        ]
      },
      "parameters": [
        {
          "schema": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid"
          },
          "name": "vendor_id",
          "in": "path",
          "description": "The ID of the group that is associated as a vendor. UUID Version 4.",
          "required": true
        }
      ]
    }
  },
  "tags": [
    {
      "name": "appointments",
      "description": "Operations related to appointments."
    },
    {
      "name": "listings",
      "description": "Operations related to listings."
    },
    {
      "name": "orders",
      "description": "Operations related to orders."
    },
    {
      "name": "vendors",
      "description": "Operations related to vendors."
    }
  ],
  "components": {
    "securitySchemes": {
      "Token": {
        "description": "A personal access token (token) identifying a user, and sometimes, the user's current group. Tokens may be generated in a group's developer settings. The token should be supplied in the authorization header: `Authorization: Bearer {token}`.",
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "Address": {
        "title": "Address",
        "type": "object",
        "description": "A street address and additional metadata about a location.",
        "x-internal": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "ID of the address. UUID Version 4.",
            "example": "00000000-0000-4000-8000-000000000000",
            "nullable": false
          },
          "latitude": {
            "type": "number",
            "description": "The geographic latitude of some reference point of the location, specified in degrees and decimal parts. Positive numbers must not include the plus symbol.",
            "example": 42.35157458574123,
            "minimum": -180,
            "maximum": 180,
            "nullable": false
          },
          "longitude": {
            "type": "number",
            "description": "The geographic longitude of some reference point of the location, specified in degrees and decimal parts. Positive numbers must not include the plus symbol.",
            "example": -71.05763741484657,
            "maximum": 180,
            "minimum": -180,
            "nullable": false
          },
          "street_number": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "example": "107",
            "description": "The street number portion of a location's address. In some areas, the street number may contain non-numeric characters. This field can also contain extensions and modifiers to the street number, such as \"1/2\" or \"-B\".",
            "nullable": true
          },
          "street_name": {
            "type": "string",
            "description": "The street name portion of a location's address.",
            "minLength": 0,
            "maxLength": 255,
            "example": "South St",
            "nullable": true
          },
          "unit_number": {
            "type": "string",
            "description": "The number or portion of a larger building or complex. Examples are: \"APT G\", \"55\", etc.",
            "minLength": 0,
            "maxLength": 255,
            "example": "Unit 2F",
            "nullable": true
          },
          "postal_code": {
            "type": "string",
            "description": "The postal code portion of a location's address.",
            "example": "02111",
            "minLength": 0,
            "maxLength": 255,
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "The city of a location's address.",
            "example": "Boston",
            "minLength": 0,
            "maxLength": 255,
            "nullable": true
          },
          "city_region": {
            "type": "string",
            "description": "A sub-section or area of a defined city. Examples would be SoHo in New York, NY, Ironbound in Newark, NJ or Inside the Beltway.",
            "minLength": 0,
            "maxLength": 255,
            "example": "Leather District",
            "nullable": true
          },
          "county_or_parish": {
            "type": "string",
            "description": "The County, Parish or other regional authority of the location.",
            "minLength": 0,
            "maxLength": 255,
            "example": "Suffolk County",
            "nullable": true
          },
          "state_or_province": {
            "type": "string",
            "description": "The ISO 3166-2 subdivision code for the state or province of the location. For example, “MA” for Massachusetts, United States.",
            "minLength": 0,
            "maxLength": 255,
            "example": "MA",
            "nullable": true
          },
          "state_or_province_region": {
            "type": "string",
            "description": "A sub-section or area of a defined state or province. Examples would be the Keys in FL or Hudson Valley in NY.",
            "minLength": 0,
            "maxLength": 255,
            "example": "Cape Cod",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "The ISO 3166-1 country code for this for the country of the location.",
            "minLength": 0,
            "maxLength": 255,
            "example": "US",
            "nullable": true
          },
          "country_region": {
            "type": "string",
            "description": "A sub-section or area of a defined country. Examples would be Napa Valley in the US, or the Amalfi Coast in Italy.",
            "example": "Napa Valley",
            "minLength": 0,
            "maxLength": 255,
            "nullable": true
          },
          "unparsed_address": {
            "type": "string",
            "description": "Unparsed text representation of the address. ",
            "example": "107 South St, Boston MA, 02111",
            "minLength": 0,
            "maxLength": 255,
            "nullable": true
          },
          "unparsed_address_part_one": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "description": "Unparsed text representation of the first part of the address, typically including the street number, street name, and unit number if applicable.  ",
            "example": "107 South St, Unit 2F",
            "nullable": true
          },
          "unparsed_address_part_two": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "description": "Unparsed text representation of the second part of the address, typically including the city, state or province, and postal code.  ",
            "example": "Boston, MA 02111",
            "nullable": true
          }
        },
        "required": [
          "id",
          "latitude",
          "longitude"
        ]
      },
      "ApiError403": {
        "type": "object",
        "title": "ApiError403",
        "description": "A forbidden error returned by the API.",
        "properties": {
          "status": {
            "type": "string",
            "example": "error",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "message": {
            "type": "string",
            "description": "The error message.",
            "example": "{ApiError message.}",
            "minLength": 0,
            "maxLength": 255,
            "nullable": false
          },
          "code": {
            "type": "integer",
            "description": "A numeric code corresponding to the error.",
            "example": 403,
            "nullable": true
          }
        },
        "required": [
          "status",
          "message"
        ]
      },
      "ApiError404": {
        "type": "object",
        "title": "ApiError404",
        "description": "A not found error returned by the API.",
        "properties": {
          "status": {
            "type": "string",
            "example": "error",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "message": {
            "type": "string",
            "description": "The error message.",
            "example": "{ApiError message.}",
            "minLength": 0,
            "maxLength": 255,
            "nullable": false
          },
          "code": {
            "type": "integer",
            "description": "A numeric code corresponding to the error.",
            "example": 404,
            "nullable": true
          }
        },
        "required": [
          "status",
          "message"
        ]
      },
      "ApiError409": {
        "type": "object",
        "title": "ApiError409",
        "description": "A conflict error returned by the API.",
        "properties": {
          "status": {
            "type": "string",
            "example": "error",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "message": {
            "type": "string",
            "description": "The error message.",
            "example": "{ApiError message.}",
            "minLength": 0,
            "maxLength": 255,
            "nullable": false
          },
          "code": {
            "type": "integer",
            "description": "A numeric code corresponding to the error.",
            "example": 409,
            "nullable": true
          }
        },
        "required": [
          "status",
          "message"
        ]
      },
      "ApiError500": {
        "type": "object",
        "title": "ApiError500",
        "description": "An internal server error returned by the API.",
        "properties": {
          "status": {
            "type": "string",
            "example": "error",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "message": {
            "type": "string",
            "description": "The error message.",
            "example": "{ApiError message.}",
            "minLength": 0,
            "maxLength": 255,
            "nullable": false
          },
          "code": {
            "type": "integer",
            "description": "A numeric code corresponding to the error.",
            "example": 500,
            "nullable": true
          }
        },
        "required": [
          "status",
          "message"
        ]
      },
      "ApiFail422": {
        "type": "object",
        "title": "ApiFail422",
        "description": "A processing or validation failure returned by the API.",
        "properties": {
          "status": {
            "type": "string",
            "example": "fail",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          }
        },
        "required": [
          "status"
        ]
      },
      "Appointment": {
        "title": "Appointment",
        "type": "object",
        "description": "An appointment.",
        "properties": {
          "id": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "description": "The ID of the appointment.",
            "nullable": false
          },
          "status": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "example": "SCHEDULED",
            "description": "The status of the appointment.",
            "nullable": true,
            "enum": [
              "SCHEDULED",
              "UNSCHEDULED",
              "RESCHEDULED",
              "CANCELED"
            ]
          },
          "title": {
            "type": "string",
            "minLength": 0,
            "maxLength": 65536,
            "example": "Appointment title",
            "description": "The title of the appointment.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "minLength": 0,
            "maxLength": 65536,
            "example": "Customer: John Doe\nOrder Details: Order #123",
            "description": "The multi-line description of the appointment.",
            "nullable": true
          },
          "start_at": {
            "type": "string",
            "description": "The date and time (ISO 8601 format) when the appointment is set to start.",
            "format": "date-time",
            "minLength": 0,
            "maxLength": 255,
            "example": "2021-06-30T20:30:00Z",
            "nullable": true
          },
          "end_at": {
            "type": "string",
            "description": "The date and time (ISO 8601 format) when the appointment is set to end.",
            "example": "2021-06-30T20:30:00Z",
            "format": "date-time",
            "minLength": 0,
            "maxLength": 255,
            "nullable": true
          },
          "duration": {
            "type": "integer",
            "description": "The length of the appointment in minutes.",
            "example": 60,
            "nullable": true
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "users": {
            "description": "Users attached to the appointment.",
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "items": {
            "type": "array",
            "description": "Items attached to the appointment.",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          }
        },
        "required": [
          "id"
        ]
      },
      "AppointmentCancelPutPayload": {
        "title": "AppointmentCancelPutPayload",
        "type": "object",
        "description": "Payload for canceling an appointment record.",
        "properties": {
          "notify_customer": {
            "type": "boolean",
            "description": "Sends a notification to the appointment's order's customer that the appointment was canceled.",
            "nullable": true,
            "example": "false"
          }
        }
      },
      "AppointmentCollection": {
        "title": "AppointmentCollection",
        "type": "object",
        "description": "A collection of appointments.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "data": {
            "type": "array",
            "description": "",
            "items": {
              "$ref": "#/components/schemas/Appointment"
            },
            "nullable": true
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta",
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks",
            "nullable": true
          }
        },
        "required": [
          "status"
        ]
      },
      "AppointmentReschedulePutPayload": {
        "title": "AppointmentReschedulePayload",
        "type": "object",
        "description": "Payload for rescheduling an appointment record.",
        "properties": {
          "start_at": {
            "type": "string",
            "description": "The new date and time (ISO 8601 format) when the appointment is set to start.",
            "example": "2021-06-30T20:30:00Z",
            "minLength": 0,
            "maxLength": 255,
            "nullable": true,
            "format": "date-time"
          },
          "end_at": {
            "type": "string",
            "description": "The new date and time (ISO 8601 format) when the appointment is set to end.",
            "example": "2021-06-30T21:30:00Z",
            "minLength": 0,
            "maxLength": 255,
            "nullable": true,
            "format": "date-time"
          },
          "notify_customer": {
            "type": "boolean",
            "description": "Send a notification to the appointment's order's customer that the appointment was rescheduled.",
            "nullable": true,
            "example": "false"
          }
        },
        "required": [
          "start_at",
          "end_at"
        ]
      },
      "AppointmentResource": {
        "title": "AppointmentResource",
        "type": "object",
        "description": "An appointment.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "data": {
            "$ref": "#/components/schemas/Appointment"
          }
        },
        "required": [
          "status"
        ]
      },
      "FloorPlan": {
        "title": "FloorPlan",
        "type": "object",
        "description": "A scale diagram of the arrangement of a building.",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the floor plan. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "example": "00000000-0000-4000-8000-000000000000",
            "nullable": false
          },
          "original_url": {
            "type": "string",
            "description": "A URL for the original, full-resolution version of the floor plan. Useful for downloading.",
            "example": "https://via.placeholder.com/2500x2000.jpg",
            "minLength": 1,
            "maxLength": 65535,
            "format": "uri",
            "nullable": false
          },
          "large_url": {
            "type": "string",
            "description": "A URL for a large version of the floor plan.",
            "example": "https://via.placeholder.com/1750x1400.jpg",
            "minLength": 1,
            "maxLength": 65535,
            "format": "uri",
            "nullable": false
          },
          "thumbnail_url": {
            "type": "string",
            "description": "A URL for a thumbnail-sized version of the floor plan.",
            "example": "https://via.placeholder.com/250x200.jpg",
            "minLength": 1,
            "maxLength": 65535,
            "format": "uri",
            "nullable": false
          },
          "title": {
            "type": "string",
            "description": "The title (or caption) of the floor plan.",
            "example": "Downstairs floorplan",
            "minLength": 1,
            "maxLength": 255,
            "nullable": true
          },
          "index": {
            "type": "integer",
            "format": "int32",
            "example": 1,
            "minimum": 0,
            "description": "Index order position of the floor plan.",
            "nullable": true
          }
        },
        "required": [
          "id",
          "original_url",
          "large_url",
          "thumbnail_url"
        ]
      },
      "Group": {
        "type": "object",
        "title": "Group",
        "description": "A collection of users that can interact with the Aryeo platform. Permissions and properties are determined based on the group's type which can be creator, agent, or brokerage.",
        "properties": {
          "object": {
            "type": "string",
            "description": "String representing the object’s type. Objects of the same type share the same schema.",
            "example": "GROUP",
            "nullable": false,
            "minLength": 1,
            "maxLength": 100
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "ID of the group. UUID Version 4.",
            "example": "00000000-0000-4000-8000-000000000000",
            "nullable": false
          },
          "type": {
            "type": "string",
            "example": "AGENT",
            "description": "The type of the group. Can be CREATOR, AGENT, or BROKERAGE, and may dictate the attributes of the group returned.",
            "minLength": 0,
            "maxLength": 255,
            "nullable": false,
            "enum": [
              "CREATOR",
              "AGENT",
              "BROKERAGE"
            ]
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 0,
            "description": "The name of the group.",
            "example": "John Doe Reality",
            "nullable": false
          },
          "email": {
            "type": "string",
            "format": "email",
            "minLength": 0,
            "maxLength": 255,
            "example": "john.doe@gmail.com",
            "description": "The email address of a group.",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "example": "6175550173",
            "minLength": 0,
            "maxLength": 255,
            "description": "A phone number represented in whichever standards specified by the group, typically ###-###-#### (separated by hyphens).",
            "nullable": true
          },
          "website_url": {
            "type": "string",
            "example": "https://www.aryeo.com",
            "minLength": 0,
            "maxLength": 255,
            "description": "The website URL of a group.",
            "format": "uri",
            "nullable": true
          },
          "logo_url": {
            "type": "string",
            "description": "The logo URL of a group.",
            "format": "uri",
            "minLength": 0,
            "maxLength": 255,
            "example": "https://via.placeholder.com/300.jpg",
            "nullable": true
          },
          "avatar_url": {
            "type": "string",
            "format": "uri",
            "example": "https://via.placeholder.com/300.jpg",
            "minLength": 0,
            "maxLength": 255,
            "description": "The profile image URL of a real estate agent. Only returned if group's type is AGENT.",
            "nullable": true
          },
          "office_name": {
            "type": "string",
            "example": "John Doe Brokerage",
            "minLength": 0,
            "maxLength": 255,
            "description": "The name of the brokerage or team of a real estate agent. Only returned if group's type is AGENT.",
            "nullable": true
          },
          "license_number": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "example": "12345678",
            "description": "The license number of a real estate agent. Only returned if group's type is AGENT.",
            "nullable": true
          },
          "social_profiles": {
            "$ref": "#/components/schemas/SocialProfiles",
            "nullable": true
          },
          "default_order_form": {
            "$ref": "#/components/schemas/OrderForm",
            "nullable": true
          },
          "order_forms": {
            "type": "array",
            "description": "An array of order forms a vendor group provides for placing orders. Only returned if group's type is CREATOR. ",
            "items": {
              "$ref": "#/components/schemas/OrderForm"
            },
            "nullable": true
          },
          "owner": {
            "$ref": "#/components/schemas/User",
            "nullable": true
          },
          "users": {
            "type": "array",
            "description": "The Aryeo users associated with this group.",
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "nullable": true
          },
          "is_brokerage_or_brokerage_agent": {
            "type": "boolean",
            "description": "Does this group represent a brokerage or an agent who belongs to a brokerage?",
            "example": true,
            "nullable": false
          }
        },
        "required": [
          "id",
          "type",
          "name",
          "is_brokerage_or_brokerage_agent"
        ]
      },
      "GroupCollection": {
        "title": "GroupCollection",
        "type": "object",
        "description": "A collection of groups.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "data": {
            "type": "array",
            "description": "",
            "items": {
              "$ref": "#/components/schemas/Group"
            },
            "nullable": true
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta",
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks",
            "nullable": true
          }
        },
        "required": [
          "status"
        ]
      },
      "GroupResource": {
        "title": "GroupResource",
        "type": "object",
        "description": "A group.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "data": {
            "$ref": "#/components/schemas/Group",
            "nullable": true
          }
        },
        "required": [
          "status"
        ]
      },
      "Image": {
        "title": "Image",
        "type": "object",
        "description": "A visual representation of something.",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the image. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "example": "00000000-0000-4000-8000-000000000000",
            "nullable": false
          },
          "thumbnail_url": {
            "type": "string",
            "description": "A URL for a thumbnail-sized version of the image.",
            "example": "https://via.placeholder.com/250x200.jpg",
            "minLength": 1,
            "maxLength": 65535,
            "format": "uri",
            "nullable": false
          },
          "large_url": {
            "type": "string",
            "description": "A URL for a large version of the image.",
            "example": "https://via.placeholder.com/1750x1400.jpg",
            "minLength": 1,
            "maxLength": 65535,
            "format": "uri",
            "nullable": false
          },
          "original_url": {
            "type": "string",
            "description": "A URL for the original, full-resolution version of the image. Useful for downloading.",
            "example": "https://via.placeholder.com/2500x2000.jpg",
            "minLength": 1,
            "maxLength": 65535,
            "format": "uri",
            "nullable": false
          },
          "index": {
            "type": "integer",
            "description": "The order in which the image should be displayed amongst other related images.",
            "example": 2,
            "nullable": true
          },
          "caption": {
            "type": "string",
            "description": "A brief explanation of the image.",
            "example": "This is the front of the house.",
            "minLength": 1,
            "maxLength": 255,
            "nullable": true
          },
          "display_in_gallery": {
            "type": "boolean",
            "description": "Should the image be displayed in a gallery?",
            "example": "true",
            "nullable": false
          }
        },
        "required": [
          "id",
          "thumbnail_url",
          "large_url",
          "original_url",
          "display_in_gallery"
        ]
      },
      "InteractiveContent": {
        "title": "InteractiveContent",
        "type": "object",
        "description": "A 3D virtual tour.",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the content. UUID Version 4.",
            "example": "00000000-0000-4000-8000-000000000000",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "nullable": false
          },
          "display_type": {
            "type": "string",
            "description": "Is the content branded, unbranded, or both?",
            "minLength": 1,
            "maxLength": 65535,
            "enum": [
              "BRANDED",
              "UNBRANDED",
              "BOTH"
            ],
            "example": "BRANDED",
            "nullable": false
          },
          "content_type": {
            "type": "string",
            "description": "The type of interactive content.",
            "example": "MATTERPORT",
            "minLength": 1,
            "maxLength": 65535,
            "enum": [
              "MATTERPORT",
              "OTHER"
            ],
            "nullable": false
          },
          "url": {
            "type": "string",
            "description": "URL for the content.",
            "example": "https://my.matterport.com/show/?m=HFaxPzqNFfm",
            "minLength": 1,
            "maxLength": 65535,
            "format": "uri",
            "nullable": false
          },
          "thumbnail_url": {
            "type": "string",
            "description": "A URL for a thumbnail-sized preview of the content.",
            "example": "https://via.placeholder.com/300.jpg",
            "minLength": 1,
            "maxLength": 65535,
            "format": "uri",
            "nullable": true
          }
        },
        "required": [
          "id",
          "display_type",
          "content_type",
          "url"
        ]
      },
      "Listing": {
        "title": "Listing",
        "type": "object",
        "description": "A real estate listing.",
        "properties": {
          "object": {
            "type": "string",
            "description": "String representing the object’s type. Objects of the same type share the same schema.",
            "example": "LISTING",
            "nullable": false,
            "minLength": 1,
            "maxLength": 100
          },
          "id": {
            "type": "string",
            "description": "ID of the listing. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "example": "00000000-0000-4000-8000-000000000000",
            "nullable": false
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "mls_number": {
            "type": "string",
            "description": "The identifier for a listing on its local MLS. ",
            "minLength": 1,
            "maxLength": 100,
            "nullable": true,
            "example": "1850209"
          },
          "type": {
            "type": "string",
            "example": "RESIDENTIAL",
            "description": "General type of the listing, primarily categorizing its use case. Examples include residential and commercial. ",
            "minLength": 1,
            "maxLength": 100,
            "nullable": true,
            "enum": [
              "BUSINESS_OPPORTUNITY",
              "COMMERCIAL_LEASE",
              "COMMERCIAL_SALE",
              "FARM",
              "LAND",
              "MANUFACTURED_IN_PARK",
              "RESIDENTIAL",
              "RESIDENTIAL_INCOME",
              "RESIDENTIAL_LEASE"
            ]
          },
          "sub_type": {
            "type": "string",
            "example": "SINGLE_FAMILY_RESIDENCE",
            "description": "Further specifies the listing type. Examples include family residence and condominium.",
            "minLength": 1,
            "maxLength": 100,
            "nullable": true,
            "enum": [
              "APARTMENT",
              "CONDOMINIUM",
              "DUPLEX",
              "FARM",
              "SINGLE_FAMILY_RESIDENCE",
              "TIMESHARE",
              "TOWNHOUSE",
              "OFFICE"
            ]
          },
          "status": {
            "type": "string",
            "example": "COMING_SOON",
            "description": "Local, regional, or otherwise custom status for the listing used by the parties involved in the listing transaction. While variable, these statuses are typically mapped to the listing's standard status.",
            "minLength": 1,
            "maxLength": 100,
            "nullable": true,
            "enum": [
              "DRAFT",
              "COMING_SOON",
              "FOR_SALE",
              "FOR_LEASE",
              "PENDING_SALE",
              "PENDING_LEASE",
              "SOLD",
              "LEASED",
              "OFF_MARKET"
            ]
          },
          "standard_status": {
            "type": "string",
            "example": "COMING_SOON",
            "description": "The status of the listing as it reflects the state of the contract between the listing agent and seller or an agreement with a buyer, including Active, Active Under Contract, Canceled, Closed, Expired, Pending, and Withdrawn.",
            "minLength": 1,
            "maxLength": 100,
            "nullable": true,
            "enum": [
              "ACTIVE",
              "ACTIVE_UNDER_CONTRACT",
              "CANCELED",
              "CLOSED",
              "COMING_SOON",
              "DELETE",
              "EXPIRED",
              "HOLD",
              "INCOMPLETE",
              "PENDING",
              "WITHDRAWN"
            ]
          },
          "description": {
            "type": "string",
            "description": "Description of the selling points of the building and/or land for sale. ",
            "example": "There are technically no designated parking spots; however, the driveway, on the back of the house, can easily park 3 standard-sized vehicles.",
            "minLength": 1,
            "maxLength": 65535,
            "nullable": true
          },
          "lot": {
            "$ref": "#/components/schemas/ListingLot"
          },
          "building": {
            "$ref": "#/components/schemas/ListingBuilding"
          },
          "price": {
            "$ref": "#/components/schemas/ListingPrice"
          },
          "list_agent": {
            "$ref": "#/components/schemas/Group"
          },
          "co_list_agent": {
            "$ref": "#/components/schemas/Group"
          },
          "images": {
            "type": "array",
            "description": "images",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          },
          "videos": {
            "type": "array",
            "description": "videos",
            "items": {
              "$ref": "#/components/schemas/Video"
            }
          },
          "floor_plans": {
            "type": "array",
            "description": "floor_plans",
            "items": {
              "$ref": "#/components/schemas/FloorPlan"
            }
          },
          "interactive_content": {
            "type": "array",
            "description": "interactive_content",
            "items": {
              "$ref": "#/components/schemas/InteractiveContent"
            }
          },
          "property_website": {
            "$ref": "#/components/schemas/PropertyWebsite"
          },
          "orders": {
            "type": "array",
            "description": "orders",
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          },
          "downloads_enabled": {
            "type": "boolean",
            "description": "Are downloads enabled for this listing?",
            "example": true,
            "nullable": false
          }
        },
        "required": [
          "object",
          "id",
          "address",
          "downloads_enabled"
        ]
      },
      "ListingBuilding": {
        "title": "ListingBuilding",
        "type": "object",
        "description": "Structural data of the primary building on a listing. Includes everything from square footage of certain spaces to construction dates. ",
        "properties": {
          "bedrooms": {
            "type": "integer",
            "description": "Total number of bedrooms.",
            "example": 4,
            "nullable": true
          },
          "bathrooms": {
            "type": "number",
            "description": "Sum of the number of bathrooms. Represented as a number in order to support half-baths.",
            "example": 3.5,
            "nullable": true
          },
          "square_feet": {
            "type": "number",
            "description": "Total number of square feet.",
            "example": 2511,
            "nullable": true
          },
          "year_built": {
            "type": "integer",
            "description": "Year the property was built.",
            "example": 1960,
            "nullable": true
          }
        }
      },
      "ListingCollection": {
        "title": "ListingCollection",
        "type": "object",
        "description": "A collection of listings.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "data": {
            "type": "array",
            "description": "",
            "items": {
              "$ref": "#/components/schemas/Listing"
            },
            "nullable": true
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta",
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks",
            "nullable": true
          }
        },
        "required": [
          "status"
        ]
      },
      "ListingLot": {
        "title": "ListingLot",
        "type": "object",
        "description": "Parcel data of the lot of a listing. Includes nearly everything about the land that makes up the listing.",
        "properties": {
          "size_acres": {
            "type": "number",
            "description": "Total area of the lot of a listing in acres. ",
            "example": 0.47,
            "nullable": true,
            "minimum": 0
          },
          "open_parking_spaces": {
            "type": "number",
            "description": "Number of parking spaces.",
            "example": 3,
            "nullable": true,
            "minimum": 0
          }
        }
      },
      "ListingPrice": {
        "title": "ListingPrice",
        "type": "object",
        "properties": {
          "list_price": {
            "type": "integer",
            "description": "The current price of the listing.",
            "example": 250000,
            "nullable": true,
            "minimum": 0
          }
        },
        "description": "Valuation data relating to the price of a listing."
      },
      "ListingResource": {
        "title": "ListingResource",
        "type": "object",
        "description": "A listing.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "data": {
            "$ref": "#/components/schemas/Listing",
            "nullable": true
          }
        },
        "required": [
          "status"
        ]
      },
      "Order": {
        "title": "Order",
        "type": "object",
        "description": "A payment request for some content or service.",
        "properties": {
          "id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the order. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "nullable": false
          },
          "number": {
            "type": "integer",
            "description": "A vanity id used for internal tracking of orders for a given vendor.",
            "example": 100,
            "nullable": false
          },
          "title": {
            "type": "string",
            "description": "The title of the order, generated by combining the order's number property with the prefix \"Order #\".",
            "example": "Order #100",
            "nullable": false,
            "minLength": 0,
            "maxLength": 255
          },
          "fulfillment_status": {
            "type": "string",
            "description": "The fulfillment status of the order.",
            "enum": [
              "FULFILLED",
              "UNFULFILLED"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "fulfilled",
            "nullable": false
          },
          "payment_status": {
            "type": "string",
            "enum": [
              "PAID",
              "UNPAID"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "paid",
            "description": "The payment status of the order.",
            "nullable": false
          },
          "currency": {
            "type": "string",
            "description": "The three-letter ISO 4217 currency code for the currency in which this order was or will be transacted. Must be a supported currency of Aryeo.",
            "example": "usd",
            "minLength": 0,
            "maxLength": 255,
            "enum": [
              "USD",
              "CAD",
              "GBP",
              "CHF",
              "EUR",
              "AUD",
              "NZD",
              "ZAR"
            ]
          },
          "total_amount": {
            "type": "integer",
            "example": 2099,
            "description": "A positive integer in the smallest currency unit (that is, 100 cents for $1.00) representing the total order amount that was or will be charged. This accounts for order items and taxes. ",
            "nullable": false,
            "minimum": 0
          },
          "payment_url": {
            "type": "string",
            "description": "A URL of a publicly-accessible webpage to pay for the order.",
            "example": "https://www.aryeo.com/v2/stripe/checkout/order/00000000-0000-4000-8000-000000000000?pageType=order",
            "maxLength": 65535,
            "minLength": 0,
            "nullable": true
          },
          "status_url": {
            "type": "string",
            "description": "A URL of a publicly-accessible webpage to see the order's status.",
            "example": "https://www.aryeo.com/v2/orders/00000000-0000-4000-8000-000000000000/status/public",
            "maxLength": 65535,
            "minLength": 0,
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "customer": {
            "$ref": "#/components/schemas/Group"
          },
          "listing": {
            "$ref": "#/components/schemas/Listing"
          },
          "items": {
            "type": "array",
            "description": "items",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          },
          "appointments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Appointment"
            }
          },
          "unconfirmed_appointments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UnconfirmedAppointment"
            }
          }
        },
        "required": [
          "id",
          "number",
          "title",
          "fulfillment_status",
          "payment_status",
          "status_url"
        ]
      },
      "OrderCollection": {
        "title": "OrderCollection",
        "type": "object",
        "description": "A collection of orders.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "data": {
            "type": "array",
            "description": "",
            "items": {
              "$ref": "#/components/schemas/Order"
            },
            "nullable": true
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta",
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks",
            "nullable": true
          }
        },
        "required": [
          "status"
        ]
      },
      "OrderForm": {
        "title": "OrderForm",
        "type": "object",
        "description": "A mechanism for placing new orders on the Aryeo platform. ",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-4000-8000-000000000000",
            "minLength": 36,
            "maxLength": 36,
            "description": "ID of the order form. UUID Version 4.",
            "nullable": false
          },
          "title": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "example": "BQ's Photography Order Form",
            "description": "The title or name of the order form.",
            "nullable": true
          },
          "url": {
            "type": "string",
            "format": "uri",
            "minLength": 0,
            "maxLength": 255,
            "example": "https://www.aryeo.com/order-forms/00000000-0000-4000-8000-000000000000",
            "description": "A URL of a publicly-accessible webpage for this order form.",
            "nullable": false
          }
        },
        "required": [
          "id",
          "url"
        ]
      },
      "OrderItem": {
        "title": "OrderItem",
        "type": "object",
        "description": "A product associated with an order.",
        "properties": {
          "id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the item. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "nullable": false
          },
          "title": {
            "type": "string",
            "description": "The title of the item.",
            "example": "Aerial Video",
            "nullable": false,
            "minLength": 0,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "The description of the item.",
            "example": "A fly-by drone video of the property.",
            "nullable": false,
            "minLength": 0,
            "maxLength": 255
          },
          "amount": {
            "type": "integer",
            "example": 2099,
            "description": "A positive integer in the smallest currency unit (that is, 100 cents for $1.00) representing the cost of a single instance of this item. This is multiplied by the quantity to calculate what was or will be charged.",
            "nullable": false,
            "minimum": 0
          },
          "quantity": {
            "type": "integer",
            "example": 2,
            "description": "A positive integer representing the number of instances of this item that was or will be charged.",
            "nullable": false,
            "minimum": 0
          }
        },
        "required": [
          "id"
        ]
      },
      "OrderPostPayload": {
        "title": "OrderPostPayload",
        "type": "object",
        "description": "Payload for creating an order.",
        "properties": {
          "fulfillment_status": {
            "type": "string",
            "description": "The fulfillment status of the order. Defaults to \"UNFULFILLED\".",
            "enum": [
              "FULFILLED",
              "UNFULFILLED"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "fulfilled",
            "nullable": true
          },
          "internal_notes": {
            "type": "string",
            "description": "Internal notes that will be attached to the order. Viewable only by the team.",
            "minLength": 0,
            "maxLength": 2550,
            "example": "Private note about the order!",
            "nullable": true
          },
          "payment_status": {
            "type": "string",
            "enum": [
              "PAID",
              "UNPAID"
            ],
            "minLength": 0,
            "maxLength": 255,
            "example": "paid",
            "description": "The payment status of the order. Defaults to \"UNPAID\". ",
            "nullable": true
          },
          "address_id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the address to associate with the order. UUID Version 4.",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          },
          "customer_id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the customer to associate with the order. UUID Version 4.",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36
          },
          "notify": {
            "type": "boolean",
            "example": true,
            "description": "Indicates if the customer and creator notifications should be sent when creating the order. Requires an address and customer to be set in order for the notifications to be sent.",
            "nullable": true
          }
        }
      },
      "OrderResource": {
        "title": "OrderResource",
        "type": "object",
        "description": "An order.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "data": {
            "$ref": "#/components/schemas/Order",
            "nullable": true
          }
        },
        "required": [
          "status"
        ]
      },
      "PaginationLinks": {
        "nullable": true,
        "title": "PaginationLinks",
        "type": "object",
        "description": "Related links for a paginated response.",
        "properties": {
          "first": {
            "type": "string",
            "description": "The first page.",
            "example": "https://api.aryeo.com/v1/{path}?page=1",
            "minLength": 1,
            "maxLength": 65535,
            "nullable": false
          },
          "last": {
            "type": "string",
            "description": "The last page.",
            "example": "https://api.aryeo.com/v1/{path}?page=10",
            "minLength": 1,
            "maxLength": 65535,
            "nullable": false
          },
          "prev": {
            "type": "string",
            "description": "The previous page. This is specified as either `string` or `null` purely for spec testing purposes. The model which is autogenerated from this definition will be thrown out and written by-hand.",
            "example": "https://api.aryeo.com/v1/{path}?page=2",
            "minLength": 1,
            "maxLength": 65535,
            "nullable": true
          },
          "next": {
            "type": "string",
            "description": "The next page. This is specified as either `string` or `null` purely for spec testing purposes. The model which is autogenerated from this definition will be thrown out and written by-hand.",
            "example": "https://api.aryeo.com/v1/{path}?page=3",
            "minLength": 1,
            "maxLength": 65535,
            "nullable": true
          }
        },
        "required": [
          "first",
          "last"
        ]
      },
      "PaginationMeta": {
        "nullable": true,
        "title": "PaginationMeta",
        "type": "object",
        "description": "Metadata about a paginated response.",
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total number of records.",
            "example": 50,
            "nullable": false
          },
          "per_page": {
            "type": "integer",
            "description": "Number of records per page.",
            "example": 15,
            "nullable": false
          },
          "current_page": {
            "type": "integer",
            "description": "The current page.",
            "example": 1,
            "nullable": false
          },
          "last_page": {
            "type": "integer",
            "description": "The last page of records.",
            "example": 4,
            "nullable": false
          },
          "from": {
            "type": "integer",
            "description": "The ID of the first record on this page. This is specified as either `integer` or `null` purely for spec testing purposes. The model which is autogenerated from this definition will be thrown out and written by-hand.",
            "example": 1,
            "nullable": true
          },
          "to": {
            "type": "integer",
            "description": "The ID of the last record on this page. This is specified as either `integer` or `null` purely for spec testing purposes. The model which is autogenerated from this definition will be thrown out and written by-hand.",
            "example": 15,
            "nullable": true
          },
          "path": {
            "type": "string",
            "description": "The current paged path.",
            "example": "https://api.aryeo.com/v1/{path}",
            "minLength": 1,
            "maxLength": 65535,
            "nullable": false
          }
        },
        "required": [
          "total",
          "per_page",
          "current_page",
          "last_page",
          "path"
        ]
      },
      "Product": {
        "title": "Product",
        "type": "object",
        "description": "A product available for purchase via an order.",
        "properties": {
          "id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the product. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "nullable": false
          },
          "title": {
            "type": "string",
            "description": "The title of the product.",
            "example": "House photos",
            "nullable": false,
            "minLength": 0,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "The description of the product.",
            "example": "Capture photos of a house for sale.",
            "nullable": false,
            "minLength": 0,
            "maxLength": 65536
          },
          "active": {
            "type": "boolean",
            "description": "The active status of a product.",
            "example": true,
            "nullable": false
          },
          "type": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "description": "The type of product.",
            "nullable": false,
            "enum": [
              "MAIN",
              "ADDON"
            ],
            "example": "MAIN"
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductVariant"
            }
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductCategory"
            }
          }
        },
        "required": [
          "id",
          "title",
          "type"
        ]
      },
      "ProductCategory": {
        "title": "ProductCategory",
        "type": "object",
        "description": "A category for products.",
        "properties": {
          "id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the product category. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "nullable": false
          },
          "title": {
            "type": "string",
            "description": "The title of the product category.",
            "example": "Photography",
            "nullable": false,
            "minLength": 0,
            "maxLength": 255
          }
        },
        "required": [
          "id",
          "title"
        ]
      },
      "ProductCollection": {
        "title": "ProductCollection",
        "type": "object",
        "description": "A collection of products.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "data": {
            "type": "array",
            "description": "",
            "items": {
              "$ref": "#/components/schemas/Product"
            },
            "nullable": true
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta",
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks",
            "nullable": true
          }
        },
        "required": [
          "status"
        ]
      },
      "ProductVariant": {
        "title": "ProductVariant",
        "type": "object",
        "description": "A variant of a product.",
        "properties": {
          "id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the product variant. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "nullable": false
          },
          "title": {
            "type": "string",
            "description": "The title of the product variant.",
            "example": "House photos",
            "nullable": false,
            "minLength": 0,
            "maxLength": 255
          },
          "price": {
            "type": "integer",
            "description": "A positive integer in the smallest currency unit (that is, 100 cents for $1.00) representing the price of the product variant.",
            "example": 10000,
            "nullable": false,
            "min": 0
          }
        },
        "required": [
          "id",
          "title",
          "price"
        ]
      },
      "PropertyWebsite": {
        "title": "PropertyWebsite",
        "type": "object",
        "description": "Website (in branded and unbranded versions) that displays information about a property.",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the website. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "example": "00000000-0000-4000-8000-000000000000",
            "nullable": false
          },
          "branded_url": {
            "type": "string",
            "description": "URL for branded version of website.",
            "minLength": 1,
            "maxLength": 65535,
            "example": "https://www.aryeo.com/v2/1200-noble-way-flower-mound-1760/branded",
            "format": "uri",
            "nullable": false
          },
          "unbranded_url": {
            "type": "string",
            "description": "URL for unbranded version of website.",
            "minLength": 1,
            "maxLength": 65535,
            "example": "https://www.aryeo.com/v2/1200-noble-way-flower-mound-1760/unbranded",
            "format": "uri",
            "nullable": false
          }
        },
        "required": [
          "id",
          "branded_url",
          "unbranded_url"
        ]
      },
      "SocialProfiles": {
        "nullable": true,
        "title": "SocialProfiles",
        "type": "object",
        "description": "External profile URLs for an agent or brokerage group.",
        "properties": {
          "facebook_profile_url": {
            "type": "string",
            "description": "URL for Facebook.",
            "minLength": 0,
            "maxLength": 65535,
            "example": "https://www.facebook.com/johndoe",
            "format": "uri",
            "nullable": true
          },
          "instagram_profile_url": {
            "type": "string",
            "description": "URL for Instagram.",
            "minLength": 0,
            "maxLength": 65535,
            "example": "https://www.instagram.com/johndoe",
            "format": "uri",
            "nullable": true
          },
          "twitter_profile_url": {
            "type": "string",
            "description": "URL for Twitter.",
            "minLength": 0,
            "maxLength": 65535,
            "example": "https://twitter.com/johndoe",
            "format": "uri",
            "nullable": true
          },
          "linkedin_profile_url": {
            "type": "string",
            "description": "URL for LinkedIn.",
            "minLength": 0,
            "maxLength": 65535,
            "example": "https://www.linkedin.com/in/johndoe/",
            "format": "uri",
            "nullable": true
          },
          "zillow_profile_url": {
            "type": "string",
            "description": "URL for Zillow.",
            "minLength": 0,
            "maxLength": 65535,
            "example": "https://www.zillow.com/profile/johndoe",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "UnconfirmedAppointment": {
        "title": "UnconfirmedAppointment",
        "type": "object",
        "description": "An unconfirmed appointment.",
        "properties": {
          "id": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "description": "The ID of the appointment.",
            "nullable": false
          },
          "title": {
            "type": "string",
            "minLength": 0,
            "maxLength": 65536,
            "example": "Appointment title",
            "description": "The title of the appointment.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "minLength": 0,
            "maxLength": 65536,
            "example": "Customer: John Doe\nOrder Details: Order #123",
            "description": "The multi-line description of the appointment.",
            "nullable": true
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "users": {
            "description": "Users attached to the appointment.",
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "preference_type": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "example": "TIME",
            "description": "The type of preferred scheduling information provided by a customer to aid in scheduling this appointment.",
            "nullable": true,
            "enum": [
              "ASAP",
              "TIME",
              "TIME_OF_DAY"
            ]
          },
          "preferred_start_at": {
            "type": "string",
            "description": "A preferred date and time (ISO 8601 format) for when the appointment could start. Only returned if unconfirmed appointment's preference type is TIME. ",
            "format": "date-time",
            "minLength": 0,
            "maxLength": 255,
            "example": "2021-06-30T20:30:00Z",
            "nullable": true
          },
          "preferred_start_at_day": {
            "type": "string",
            "description": "A preferred date (ISO 8601 format) for when the appointment could start. Only returned if unconfirmed appointment's preference type is TIME_OF_DAY. ",
            "format": "date",
            "minLength": 0,
            "maxLength": 255,
            "example": "2021-06-30",
            "nullable": true
          },
          "preferred_start_at_time_of_day": {
            "type": "string",
            "description": "A preferred time of day for when the appointment could start. Only returned if unconfirmed appointment's preference type is TIME_OF_DAY. ",
            "minLength": 0,
            "maxLength": 255,
            "example": "AFTERNOON",
            "nullable": true,
            "enum": [
              "MORNING",
              "AFTERNOON",
              "TWILIGHT"
            ]
          },
          "duration": {
            "type": "integer",
            "description": "The estimated length of the appointment in minutes, if available.",
            "example": 60,
            "nullable": true
          }
        },
        "required": [
          "id"
        ]
      },
      "UnconfirmedAppointmentCollection": {
        "title": "UnconfirmedAppointmentCollection",
        "type": "object",
        "description": "A collection of appointments.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "data": {
            "type": "array",
            "description": "",
            "items": {
              "$ref": "#/components/schemas/UnconfirmedAppointment"
            },
            "nullable": true
          },
          "meta": {
            "$ref": "#/components/schemas/PaginationMeta",
            "nullable": true
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks",
            "nullable": true
          }
        },
        "required": [
          "status"
        ]
      },
      "UnconfirmedAppointmentResource": {
        "title": "UnconfirmedAppointmentResource",
        "type": "object",
        "description": "An appointment.",
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "minLength": 0,
            "maxLength": 255,
            "description": "What was the state of the request?",
            "nullable": false
          },
          "data": {
            "$ref": "#/components/schemas/UnconfirmedAppointment"
          }
        },
        "required": [
          "status"
        ]
      },
      "User": {
        "type": "object",
        "title": "User",
        "description": "A record of a person on the Aryeo platform.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "minLength": 36,
            "maxLength": 36,
            "description": "ID of the user. UUID Version 4.",
            "example": "00000000-0000-4000-8000-000000000000",
            "nullable": false
          },
          "email": {
            "type": "string",
            "format": "email",
            "minLength": 0,
            "maxLength": 255,
            "example": "john.doe@gmail.com",
            "description": "Email address of the user.",
            "nullable": false
          },
          "first_name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 0,
            "example": "John",
            "description": "First name of the user.",
            "nullable": true
          },
          "last_name": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "example": "Doe",
            "description": "Last name of the user.",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "example": "123456789",
            "minLength": 0,
            "maxLength": 255,
            "description": "A phone number represented in whichever standards specified by the user, typically ###-###-#### (separated by hyphens).",
            "nullable": true
          },
          "avatar_url": {
            "type": "string",
            "format": "uri",
            "example": "https://via.placeholder.com/300.jpg",
            "description": "The avatar image URL of a user.",
            "minLength": 0,
            "maxLength": 255,
            "nullable": true
          },
          "relationship": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "example": "owner",
            "description": "Describes user's relationship (access level) to a specified group. Only returned if this resource is returned as a sub-resource of a group.",
            "nullable": true
          }
        },
        "required": [
          "id",
          "email"
        ]
      },
      "Video": {
        "title": "Video",
        "type": "object",
        "description": "A recording of moving visual images. Provided either as a download URL (MP4) or a link (e.g. YouTube, Vimeo).",
        "properties": {
          "id": {
            "type": "string",
            "example": "00000000-0000-4000-8000-000000000000",
            "description": "ID of the video. UUID Version 4.",
            "minLength": 36,
            "maxLength": 36,
            "format": "uuid",
            "nullable": false
          },
          "title": {
            "type": "string",
            "example": "The New Vimeo Player (You Know, For Videos)",
            "description": "The title of the video given by the uploading user.",
            "maxLength": 255,
            "minLength": 1,
            "nullable": true
          },
          "duration": {
            "type": "integer",
            "description": "The video's runtime in seconds.",
            "example": 360,
            "nullable": true
          },
          "display_type": {
            "type": "string",
            "example": "BRANDED",
            "description": "The display type determines if the video is branded or unbranded (can also be none or both). This affects whether the video is displayed on branded or unbranded marketing materials such as the property website.",
            "maxLength": 255,
            "minLength": 1,
            "enum": [
              "BRANDED",
              "UNBRANDED",
              "BOTH",
              "NONE"
            ],
            "nullable": false
          },
          "source_type": {
            "type": "string",
            "example": "OPTIMIZED",
            "description": "The original upload source of the video, used to determine how to handle the playback_url of the video and other display properties. ",
            "maxLength": 255,
            "minLength": 1,
            "enum": [
              "YOUTUBE",
              "VIMEO",
              "OPTIMIZED",
              "UPLOADED",
              "LINK"
            ],
            "nullable": false
          },
          "thumbnail_url": {
            "type": "string",
            "description": "A thumbnail image URL for the video.",
            "minLength": 0,
            "maxLength": 65535,
            "example": "https://via.placeholder.com/300.jpg",
            "format": "uri",
            "nullable": false
          },
          "playback_url": {
            "type": "string",
            "description": "A URL linking to playback stream of the video.",
            "minLength": 0,
            "maxLength": 65535,
            "example": "https://player.vimeo.com/video/76979871",
            "format": "uri",
            "nullable": false
          },
          "download_url": {
            "type": "string",
            "description": "A URL for downloading the video.",
            "example": "https://videos.aryeo.com/listings/00000000-0000-4000-8000-000000000000/00000000-0000-4000-8000-000000000000.mp4",
            "maxLength": 65535,
            "format": "uri",
            "minLength": 1,
            "nullable": true
          },
          "share_url": {
            "type": "string",
            "format": "uri",
            "description": "A URL linking to a public viewing optimized webpage the video.",
            "example": "https://www.aryeo.com/v2/00000000-0000-4000-8000-000000000000/videos/1",
            "minLength": 0,
            "maxLength": 65535,
            "nullable": true
          }
        },
        "required": [
          "id",
          "display_type",
          "source_type",
          "thumbnail_url",
          "playback_url"
        ]
      }
    }
  }
}